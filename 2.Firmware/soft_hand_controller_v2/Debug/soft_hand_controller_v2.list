
soft_hand_controller_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080031e4  080031e4  000041e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003208  08003208  0000504c  2**0
                  CONTENTS
  4 .ARM          00000000  08003208  08003208  0000504c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003208  08003208  0000504c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003208  08003208  00004208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800320c  0800320c  0000420c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08003210  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000050  0800325c  00005050  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  0800325c  000051bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b735  00000000  00000000  00005075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260e  00000000  00000000  000107aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00012db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a9  00000000  00000000  00013a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d63  00000000  00000000  00014409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000feff  00000000  00000000  0002d16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab46  00000000  00000000  0003d06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7bb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b4  00000000  00000000  000c7bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000caea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	080031cc 	.word	0x080031cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	080031cc 	.word	0x080031cc

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000150:	4b17      	ldr	r3, [pc, #92]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000152:	4a18      	ldr	r2, [pc, #96]	@ (80001b4 <MX_CAN_Init+0x68>)
 8000154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000156:	4b16      	ldr	r3, [pc, #88]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000158:	2206      	movs	r2, #6
 800015a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015c:	4b14      	ldr	r3, [pc, #80]	@ (80001b0 <MX_CAN_Init+0x64>)
 800015e:	2200      	movs	r2, #0
 8000160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000162:	4b13      	ldr	r3, [pc, #76]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000164:	2200      	movs	r2, #0
 8000166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000168:	4b11      	ldr	r3, [pc, #68]	@ (80001b0 <MX_CAN_Init+0x64>)
 800016a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800016e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000170:	4b0f      	ldr	r3, [pc, #60]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000172:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000176:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000178:	4b0d      	ldr	r3, [pc, #52]	@ (80001b0 <MX_CAN_Init+0x64>)
 800017a:	2200      	movs	r2, #0
 800017c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800017e:	4b0c      	ldr	r3, [pc, #48]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000180:	2200      	movs	r2, #0
 8000182:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000184:	4b0a      	ldr	r3, [pc, #40]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000186:	2201      	movs	r2, #1
 8000188:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800018a:	4b09      	ldr	r3, [pc, #36]	@ (80001b0 <MX_CAN_Init+0x64>)
 800018c:	2201      	movs	r2, #1
 800018e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000190:	4b07      	ldr	r3, [pc, #28]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000192:	2200      	movs	r2, #0
 8000194:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000196:	4b06      	ldr	r3, [pc, #24]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000198:	2200      	movs	r2, #0
 800019a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <MX_CAN_Init+0x64>)
 800019e:	f000 fc79 	bl	8000a94 <HAL_CAN_Init>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001a8:	f000 f93d 	bl	8000426 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	2000006c 	.word	0x2000006c
 80001b4:	40006400 	.word	0x40006400

080001b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b088      	sub	sp, #32
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c0:	f107 0310 	add.w	r3, r7, #16
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a20      	ldr	r2, [pc, #128]	@ (8000254 <HAL_CAN_MspInit+0x9c>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d139      	bne.n	800024c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000258 <HAL_CAN_MspInit+0xa0>)
 80001da:	69db      	ldr	r3, [r3, #28]
 80001dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000258 <HAL_CAN_MspInit+0xa0>)
 80001de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e2:	61d3      	str	r3, [r2, #28]
 80001e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000258 <HAL_CAN_MspInit+0xa0>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	4b19      	ldr	r3, [pc, #100]	@ (8000258 <HAL_CAN_MspInit+0xa0>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a18      	ldr	r2, [pc, #96]	@ (8000258 <HAL_CAN_MspInit+0xa0>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b16      	ldr	r3, [pc, #88]	@ (8000258 <HAL_CAN_MspInit+0xa0>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000208:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800020c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	480f      	ldr	r0, [pc, #60]	@ (800025c <HAL_CAN_MspInit+0xa4>)
 800021e:	f001 fcc3 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000228:	2302      	movs	r3, #2
 800022a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022c:	2303      	movs	r3, #3
 800022e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <HAL_CAN_MspInit+0xa4>)
 8000238:	f001 fcb6 	bl	8001ba8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2015      	movs	r0, #21
 8000242:	f001 fa7a 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000246:	2015      	movs	r0, #21
 8000248:	f001 fa93 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40006400 	.word	0x40006400
 8000258:	40021000 	.word	0x40021000
 800025c:	40010800 	.word	0x40010800

08000260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000266:	4b14      	ldr	r3, [pc, #80]	@ (80002b8 <MX_GPIO_Init+0x58>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a13      	ldr	r2, [pc, #76]	@ (80002b8 <MX_GPIO_Init+0x58>)
 800026c:	f043 0320 	orr.w	r3, r3, #32
 8000270:	6193      	str	r3, [r2, #24]
 8000272:	4b11      	ldr	r3, [pc, #68]	@ (80002b8 <MX_GPIO_Init+0x58>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f003 0320 	and.w	r3, r3, #32
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <MX_GPIO_Init+0x58>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	4a0d      	ldr	r2, [pc, #52]	@ (80002b8 <MX_GPIO_Init+0x58>)
 8000284:	f043 0304 	orr.w	r3, r3, #4
 8000288:	6193      	str	r3, [r2, #24]
 800028a:	4b0b      	ldr	r3, [pc, #44]	@ (80002b8 <MX_GPIO_Init+0x58>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	f003 0304 	and.w	r3, r3, #4
 8000292:	60bb      	str	r3, [r7, #8]
 8000294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000296:	4b08      	ldr	r3, [pc, #32]	@ (80002b8 <MX_GPIO_Init+0x58>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a07      	ldr	r2, [pc, #28]	@ (80002b8 <MX_GPIO_Init+0x58>)
 800029c:	f043 0308 	orr.w	r3, r3, #8
 80002a0:	6193      	str	r3, [r2, #24]
 80002a2:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <MX_GPIO_Init+0x58>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f003 0308 	and.w	r3, r3, #8
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]

}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40021000 	.word	0x40021000

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 fb85 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f869 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f7ff ffc9 	bl	8000260 <MX_GPIO_Init>
  MX_CAN_Init();
 80002ce:	f7ff ff3d 	bl	800014c <MX_CAN_Init>
  MX_TIM2_Init();
 80002d2:	f000 f91f 	bl	8000514 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002d6:	f000 f981 	bl	80005dc <MX_TIM3_Init>
  MX_TIM4_Init();
 80002da:	f000 f9e3 	bl	80006a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
    __HAL_AFIO_REMAP_TIM3_PARTIAL(); // Remap
 80002de:	4b28      	ldr	r3, [pc, #160]	@ (8000380 <main+0xc4>)
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	4a20      	ldr	r2, [pc, #128]	@ (8000380 <main+0xc4>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6053      	str	r3, [r2, #4]
    CAN_Init();
 8000302:	f002 fddf 	bl	8002ec4 <CAN_Init>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000306:	2104      	movs	r1, #4
 8000308:	481e      	ldr	r0, [pc, #120]	@ (8000384 <main+0xc8>)
 800030a:	f002 f9ff 	bl	800270c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800030e:	2100      	movs	r1, #0
 8000310:	481d      	ldr	r0, [pc, #116]	@ (8000388 <main+0xcc>)
 8000312:	f002 f9fb 	bl	800270c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000316:	2104      	movs	r1, #4
 8000318:	481b      	ldr	r0, [pc, #108]	@ (8000388 <main+0xcc>)
 800031a:	f002 f9f7 	bl	800270c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800031e:	2100      	movs	r1, #0
 8000320:	481a      	ldr	r0, [pc, #104]	@ (800038c <main+0xd0>)
 8000322:	f002 f9f3 	bl	800270c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000326:	2104      	movs	r1, #4
 8000328:	4818      	ldr	r0, [pc, #96]	@ (800038c <main+0xd0>)
 800032a:	f002 f9ef 	bl	800270c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800032e:	2108      	movs	r1, #8
 8000330:	4816      	ldr	r0, [pc, #88]	@ (800038c <main+0xd0>)
 8000332:	f002 f9eb 	bl	800270c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000336:	210c      	movs	r1, #12
 8000338:	4814      	ldr	r0, [pc, #80]	@ (800038c <main+0xd0>)
 800033a:	f002 f9e7 	bl	800270c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800033e:	2100      	movs	r1, #0
 8000340:	4810      	ldr	r0, [pc, #64]	@ (8000384 <main+0xc8>)
 8000342:	f002 f9e3 	bl	800270c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//    HAL_UART_Transmit(&huart1, "init", 4, 5);
    while (1)
    {
        if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 1)
 8000346:	2100      	movs	r1, #0
 8000348:	4811      	ldr	r0, [pc, #68]	@ (8000390 <main+0xd4>)
 800034a:	f000 fecc 	bl	80010e6 <HAL_CAN_GetRxFifoFillLevel>
        {
        }
        if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 800034e:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <main+0xd8>)
 8000350:	4a11      	ldr	r2, [pc, #68]	@ (8000398 <main+0xdc>)
 8000352:	2100      	movs	r1, #0
 8000354:	480e      	ldr	r0, [pc, #56]	@ (8000390 <main+0xd4>)
 8000356:	f000 fda5 	bl	8000ea4 <HAL_CAN_GetRxMessage>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d1f2      	bne.n	8000346 <main+0x8a>
        {

            switch (RxHeader.FilterMatchIndex)
 8000360:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <main+0xdc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d002      	beq.n	800036e <main+0xb2>
 8000368:	2b01      	cmp	r3, #1
 800036a:	d004      	beq.n	8000376 <main+0xba>
 800036c:	e007      	b.n	800037e <main+0xc2>
            {
            case 0: /*广播*/
#ifdef TEST_MODE
                HAL_UART_Transmit(&huart1, "Bank0Recived", 12, 5);
#endif
                FILTER_MsgProcess(RxData);
 800036e:	4809      	ldr	r0, [pc, #36]	@ (8000394 <main+0xd8>)
 8000370:	f002 fe35 	bl	8002fde <FILTER_MsgProcess>
                break;
 8000374:	e003      	b.n	800037e <main+0xc2>
            case 1:
#ifdef TEST_MODE
                HAL_UART_Transmit(&huart1, "Bank1Recived", 12, 5);
#endif
                SERVO_MsgProcess(RxData);
 8000376:	4807      	ldr	r0, [pc, #28]	@ (8000394 <main+0xd8>)
 8000378:	f002 fe0e 	bl	8002f98 <SERVO_MsgProcess>
                break;
 800037c:	bf00      	nop
        if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 1)
 800037e:	e7e2      	b.n	8000346 <main+0x8a>
 8000380:	40010000 	.word	0x40010000
 8000384:	200000b8 	.word	0x200000b8
 8000388:	20000100 	.word	0x20000100
 800038c:	20000148 	.word	0x20000148
 8000390:	2000006c 	.word	0x2000006c
 8000394:	200000b0 	.word	0x200000b0
 8000398:	20000094 	.word	0x20000094

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b090      	sub	sp, #64	@ 0x40
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	2228      	movs	r2, #40	@ 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 fee2 	bl	8003174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003be:	2301      	movs	r3, #1
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003cc:	2301      	movs	r3, #1
 80003ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d0:	2302      	movs	r3, #2
 80003d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003da:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e0:	f107 0318 	add.w	r3, r7, #24
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 fd63 	bl	8001eb0 <HAL_RCC_OscConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f0:	f000 f819 	bl	8000426 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f4:	230f      	movs	r3, #15
 80003f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f8:	2302      	movs	r3, #2
 80003fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000400:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2102      	movs	r1, #2
 800040e:	4618      	mov	r0, r3
 8000410:	f001 ffd0 	bl	80023b4 <HAL_RCC_ClockConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800041a:	f000 f804 	bl	8000426 <Error_Handler>
  }
}
 800041e:	bf00      	nop
 8000420:	3740      	adds	r7, #64	@ 0x40
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042a:	b672      	cpsid	i
}
 800042c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800042e:	bf00      	nop
 8000430:	e7fd      	b.n	800042e <Error_Handler+0x8>
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b16      	ldr	r3, [pc, #88]	@ (8000494 <HAL_MspInit+0x60>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a15      	ldr	r2, [pc, #84]	@ (8000494 <HAL_MspInit+0x60>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <HAL_MspInit+0x60>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <HAL_MspInit+0x60>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a0f      	ldr	r2, [pc, #60]	@ (8000494 <HAL_MspInit+0x60>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b0d      	ldr	r3, [pc, #52]	@ (8000494 <HAL_MspInit+0x60>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800046a:	2005      	movs	r0, #5
 800046c:	f001 f95a 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000470:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <HAL_MspInit+0x64>)
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <HAL_MspInit+0x64>)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048c:	bf00      	nop
 800048e:	3710      	adds	r7, #16
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <NMI_Handler+0x4>

080004a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <HardFault_Handler+0x4>

080004ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <MemManage_Handler+0x4>

080004b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <BusFault_Handler+0x4>

080004bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <UsageFault_Handler+0x4>

080004c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ec:	f000 fab6 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80004f8:	4802      	ldr	r0, [pc, #8]	@ (8000504 <CAN1_RX1_IRQHandler+0x10>)
 80004fa:	f000 fe1b 	bl	8001134 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000006c 	.word	0x2000006c

08000508 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000536:	4b28      	ldr	r3, [pc, #160]	@ (80005d8 <MX_TIM2_Init+0xc4>)
 8000538:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800053c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800053e:	4b26      	ldr	r3, [pc, #152]	@ (80005d8 <MX_TIM2_Init+0xc4>)
 8000540:	2247      	movs	r2, #71	@ 0x47
 8000542:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000544:	4b24      	ldr	r3, [pc, #144]	@ (80005d8 <MX_TIM2_Init+0xc4>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800054a:	4b23      	ldr	r3, [pc, #140]	@ (80005d8 <MX_TIM2_Init+0xc4>)
 800054c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000550:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000552:	4b21      	ldr	r3, [pc, #132]	@ (80005d8 <MX_TIM2_Init+0xc4>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000558:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <MX_TIM2_Init+0xc4>)
 800055a:	2200      	movs	r2, #0
 800055c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800055e:	481e      	ldr	r0, [pc, #120]	@ (80005d8 <MX_TIM2_Init+0xc4>)
 8000560:	f002 f884 	bl	800266c <HAL_TIM_PWM_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800056a:	f7ff ff5c 	bl	8000426 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000572:	2300      	movs	r3, #0
 8000574:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	4619      	mov	r1, r3
 800057c:	4816      	ldr	r0, [pc, #88]	@ (80005d8 <MX_TIM2_Init+0xc4>)
 800057e:	f002 fc43 	bl	8002e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000588:	f7ff ff4d 	bl	8000426 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800058c:	2360      	movs	r3, #96	@ 0x60
 800058e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	4619      	mov	r1, r3
 80005a2:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <MX_TIM2_Init+0xc4>)
 80005a4:	f002 f954 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80005ae:	f7ff ff3a 	bl	8000426 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2204      	movs	r2, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <MX_TIM2_Init+0xc4>)
 80005ba:	f002 f949 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80005c4:	f7ff ff2f 	bl	8000426 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <MX_TIM2_Init+0xc4>)
 80005ca:	f000 f929 	bl	8000820 <HAL_TIM_MspPostInit>

}
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	@ 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000b8 	.word	0x200000b8

080005dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005fe:	4b27      	ldr	r3, [pc, #156]	@ (800069c <MX_TIM3_Init+0xc0>)
 8000600:	4a27      	ldr	r2, [pc, #156]	@ (80006a0 <MX_TIM3_Init+0xc4>)
 8000602:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000604:	4b25      	ldr	r3, [pc, #148]	@ (800069c <MX_TIM3_Init+0xc0>)
 8000606:	2247      	movs	r2, #71	@ 0x47
 8000608:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060a:	4b24      	ldr	r3, [pc, #144]	@ (800069c <MX_TIM3_Init+0xc0>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <MX_TIM3_Init+0xc0>)
 8000612:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000616:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000618:	4b20      	ldr	r3, [pc, #128]	@ (800069c <MX_TIM3_Init+0xc0>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061e:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_TIM3_Init+0xc0>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000624:	481d      	ldr	r0, [pc, #116]	@ (800069c <MX_TIM3_Init+0xc0>)
 8000626:	f002 f821 	bl	800266c <HAL_TIM_PWM_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000630:	f7ff fef9 	bl	8000426 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4619      	mov	r1, r3
 8000642:	4816      	ldr	r0, [pc, #88]	@ (800069c <MX_TIM3_Init+0xc0>)
 8000644:	f002 fbe0 	bl	8002e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800064e:	f7ff feea 	bl	8000426 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000652:	2360      	movs	r3, #96	@ 0x60
 8000654:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <MX_TIM3_Init+0xc0>)
 800066a:	f002 f8f1 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000674:	f7ff fed7 	bl	8000426 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2204      	movs	r2, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4807      	ldr	r0, [pc, #28]	@ (800069c <MX_TIM3_Init+0xc0>)
 8000680:	f002 f8e6 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800068a:	f7ff fecc 	bl	8000426 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800068e:	4803      	ldr	r0, [pc, #12]	@ (800069c <MX_TIM3_Init+0xc0>)
 8000690:	f000 f8c6 	bl	8000820 <HAL_TIM_MspPostInit>

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	@ 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000100 	.word	0x20000100
 80006a0:	40000400 	.word	0x40000400

080006a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	@ 0x28
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
 80006c2:	615a      	str	r2, [r3, #20]
 80006c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006c6:	4b32      	ldr	r3, [pc, #200]	@ (8000790 <MX_TIM4_Init+0xec>)
 80006c8:	4a32      	ldr	r2, [pc, #200]	@ (8000794 <MX_TIM4_Init+0xf0>)
 80006ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80006cc:	4b30      	ldr	r3, [pc, #192]	@ (8000790 <MX_TIM4_Init+0xec>)
 80006ce:	2247      	movs	r2, #71	@ 0x47
 80006d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000790 <MX_TIM4_Init+0xec>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80006d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000790 <MX_TIM4_Init+0xec>)
 80006da:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80006de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_TIM4_Init+0xec>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000790 <MX_TIM4_Init+0xec>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80006ec:	4828      	ldr	r0, [pc, #160]	@ (8000790 <MX_TIM4_Init+0xec>)
 80006ee:	f001 ffbd 	bl	800266c <HAL_TIM_PWM_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80006f8:	f7ff fe95 	bl	8000426 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4619      	mov	r1, r3
 800070a:	4821      	ldr	r0, [pc, #132]	@ (8000790 <MX_TIM4_Init+0xec>)
 800070c:	f002 fb7c 	bl	8002e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000716:	f7ff fe86 	bl	8000426 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071a:	2360      	movs	r3, #96	@ 0x60
 800071c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	4619      	mov	r1, r3
 8000730:	4817      	ldr	r0, [pc, #92]	@ (8000790 <MX_TIM4_Init+0xec>)
 8000732:	f002 f88d 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800073c:	f7ff fe73 	bl	8000426 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2204      	movs	r2, #4
 8000744:	4619      	mov	r1, r3
 8000746:	4812      	ldr	r0, [pc, #72]	@ (8000790 <MX_TIM4_Init+0xec>)
 8000748:	f002 f882 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000752:	f7ff fe68 	bl	8000426 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2208      	movs	r2, #8
 800075a:	4619      	mov	r1, r3
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <MX_TIM4_Init+0xec>)
 800075e:	f002 f877 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000768:	f7ff fe5d 	bl	8000426 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	220c      	movs	r2, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4807      	ldr	r0, [pc, #28]	@ (8000790 <MX_TIM4_Init+0xec>)
 8000774:	f002 f86c 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800077e:	f7ff fe52 	bl	8000426 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <MX_TIM4_Init+0xec>)
 8000784:	f000 f84c 	bl	8000820 <HAL_TIM_MspPostInit>

}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	@ 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000148 	.word	0x20000148
 8000794:	40000800 	.word	0x40000800

08000798 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000798:	b480      	push	{r7}
 800079a:	b087      	sub	sp, #28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007a8:	d10c      	bne.n	80007c4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <HAL_TIM_PWM_MspInit+0x7c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a19      	ldr	r2, [pc, #100]	@ (8000814 <HAL_TIM_PWM_MspInit+0x7c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <HAL_TIM_PWM_MspInit+0x7c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80007c2:	e022      	b.n	800080a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a13      	ldr	r2, [pc, #76]	@ (8000818 <HAL_TIM_PWM_MspInit+0x80>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d10c      	bne.n	80007e8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <HAL_TIM_PWM_MspInit+0x7c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <HAL_TIM_PWM_MspInit+0x7c>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <HAL_TIM_PWM_MspInit+0x7c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
}
 80007e6:	e010      	b.n	800080a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0b      	ldr	r2, [pc, #44]	@ (800081c <HAL_TIM_PWM_MspInit+0x84>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d10b      	bne.n	800080a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_TIM_PWM_MspInit+0x7c>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <HAL_TIM_PWM_MspInit+0x7c>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_TIM_PWM_MspInit+0x7c>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
}
 800080a:	bf00      	nop
 800080c:	371c      	adds	r7, #28
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40021000 	.word	0x40021000
 8000818:	40000400 	.word	0x40000400
 800081c:	40000800 	.word	0x40000800

08000820 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	@ 0x30
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800083e:	d143      	bne.n	80008c8 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b4a      	ldr	r3, [pc, #296]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a49      	ldr	r2, [pc, #292]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b47      	ldr	r3, [pc, #284]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000858:	4b44      	ldr	r3, [pc, #272]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a43      	ldr	r2, [pc, #268]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b41      	ldr	r3, [pc, #260]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000870:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2302      	movs	r3, #2
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	4619      	mov	r1, r3
 8000884:	483a      	ldr	r0, [pc, #232]	@ (8000970 <HAL_TIM_MspPostInit+0x150>)
 8000886:	f001 f98f 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800088a:	2308      	movs	r3, #8
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2302      	movs	r3, #2
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	4619      	mov	r1, r3
 800089c:	4835      	ldr	r0, [pc, #212]	@ (8000974 <HAL_TIM_MspPostInit+0x154>)
 800089e:	f001 f983 	bl	8001ba8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80008a2:	4b35      	ldr	r3, [pc, #212]	@ (8000978 <HAL_TIM_MspPostInit+0x158>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000978 <HAL_TIM_MspPostInit+0x158>)
 80008c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008c4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80008c6:	e04d      	b.n	8000964 <HAL_TIM_MspPostInit+0x144>
  else if(timHandle->Instance==TIM3)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a2b      	ldr	r2, [pc, #172]	@ (800097c <HAL_TIM_MspPostInit+0x15c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d12a      	bne.n	8000928 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b26      	ldr	r3, [pc, #152]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	4a25      	ldr	r2, [pc, #148]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6193      	str	r3, [r2, #24]
 80008de:	4b23      	ldr	r3, [pc, #140]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008ea:	2330      	movs	r3, #48	@ 0x30
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2302      	movs	r3, #2
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 0318 	add.w	r3, r7, #24
 80008fa:	4619      	mov	r1, r3
 80008fc:	481d      	ldr	r0, [pc, #116]	@ (8000974 <HAL_TIM_MspPostInit+0x154>)
 80008fe:	f001 f953 	bl	8001ba8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <HAL_TIM_MspPostInit+0x158>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000912:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800091a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000920:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <HAL_TIM_MspPostInit+0x158>)
 8000922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000924:	6053      	str	r3, [r2, #4]
}
 8000926:	e01d      	b.n	8000964 <HAL_TIM_MspPostInit+0x144>
  else if(timHandle->Instance==TIM4)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a14      	ldr	r2, [pc, #80]	@ (8000980 <HAL_TIM_MspPostInit+0x160>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d118      	bne.n	8000964 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6193      	str	r3, [r2, #24]
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <HAL_TIM_MspPostInit+0x14c>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800094a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2302      	movs	r3, #2
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <HAL_TIM_MspPostInit+0x154>)
 8000960:	f001 f922 	bl	8001ba8 <HAL_GPIO_Init>
}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	@ 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021000 	.word	0x40021000
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00
 8000978:	40010000 	.word	0x40010000
 800097c:	40000400 	.word	0x40000400
 8000980:	40000800 	.word	0x40000800

08000984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000984:	f7ff fdc0 	bl	8000508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800098a:	490c      	ldr	r1, [pc, #48]	@ (80009bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800098c:	4a0c      	ldr	r2, [pc, #48]	@ (80009c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a09      	ldr	r2, [pc, #36]	@ (80009c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009a0:	4c09      	ldr	r4, [pc, #36]	@ (80009c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f002 fbe9 	bl	8003184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b2:	f7ff fc83 	bl	80002bc <main>
  bx lr
 80009b6:	4770      	bx	lr
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80009c0:	08003210 	.word	0x08003210
  ldr r2, =_sbss
 80009c4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80009c8:	200001bc 	.word	0x200001bc

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <HAL_Init+0x28>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	@ (80009f8 <HAL_Init+0x28>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 fe9f 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f808 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff fd22 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 feb7 	bl	800178e <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 fe7f 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	@ (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <HAL_IncTick+0x1c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <HAL_IncTick+0x20>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a03      	ldr	r2, [pc, #12]	@ (8000a7c <HAL_IncTick+0x20>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000190 	.word	0x20000190

08000a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b02      	ldr	r3, [pc, #8]	@ (8000a90 <HAL_GetTick+0x10>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	20000190 	.word	0x20000190

08000a94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e0ed      	b.n	8000c82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fb80 	bl	80001b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f042 0201 	orr.w	r2, r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ac8:	f7ff ffda 	bl	8000a80 <HAL_GetTick>
 8000acc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ace:	e012      	b.n	8000af6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ad0:	f7ff ffd6 	bl	8000a80 <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	2b0a      	cmp	r3, #10
 8000adc:	d90b      	bls.n	8000af6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2205      	movs	r2, #5
 8000aee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e0c5      	b.n	8000c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0e5      	beq.n	8000ad0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 0202 	bic.w	r2, r2, #2
 8000b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b14:	f7ff ffb4 	bl	8000a80 <HAL_GetTick>
 8000b18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b1a:	e012      	b.n	8000b42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b1c:	f7ff ffb0 	bl	8000a80 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	2b0a      	cmp	r3, #10
 8000b28:	d90b      	bls.n	8000b42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2205      	movs	r2, #5
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e09f      	b.n	8000c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1e5      	bne.n	8000b1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7e1b      	ldrb	r3, [r3, #24]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d108      	bne.n	8000b6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e007      	b.n	8000b7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7e5b      	ldrb	r3, [r3, #25]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d108      	bne.n	8000b94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e007      	b.n	8000ba4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7e9b      	ldrb	r3, [r3, #26]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d108      	bne.n	8000bbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 0220 	orr.w	r2, r2, #32
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e007      	b.n	8000bce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0220 	bic.w	r2, r2, #32
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7edb      	ldrb	r3, [r3, #27]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d108      	bne.n	8000be8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 0210 	bic.w	r2, r2, #16
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 0210 	orr.w	r2, r2, #16
 8000bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7f1b      	ldrb	r3, [r3, #28]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d108      	bne.n	8000c12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f042 0208 	orr.w	r2, r2, #8
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	e007      	b.n	8000c22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 0208 	bic.w	r2, r2, #8
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7f5b      	ldrb	r3, [r3, #29]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d108      	bne.n	8000c3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f042 0204 	orr.w	r2, r2, #4
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	e007      	b.n	8000c4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0204 	bic.w	r2, r2, #4
 8000c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	ea42 0103 	orr.w	r1, r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	1e5a      	subs	r2, r3, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b087      	sub	sp, #28
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ca2:	7cfb      	ldrb	r3, [r7, #19]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d003      	beq.n	8000cb0 <HAL_CAN_ConfigFilter+0x26>
 8000ca8:	7cfb      	ldrb	r3, [r7, #19]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	f040 80aa 	bne.w	8000e04 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cb6:	f043 0201 	orr.w	r2, r3, #1
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	f003 031f 	and.w	r3, r3, #31
 8000cc8:	2201      	movs	r2, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d123      	bne.n	8000d32 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3248      	adds	r2, #72	@ 0x48
 8000d12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d28:	6979      	ldr	r1, [r7, #20]
 8000d2a:	3348      	adds	r3, #72	@ 0x48
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	440b      	add	r3, r1
 8000d30:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d122      	bne.n	8000d80 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	431a      	orrs	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3248      	adds	r2, #72	@ 0x48
 8000d60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d76:	6979      	ldr	r1, [r7, #20]
 8000d78:	3348      	adds	r3, #72	@ 0x48
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	440b      	add	r3, r1
 8000d7e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d109      	bne.n	8000d9c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000d9a:	e007      	b.n	8000dac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	431a      	orrs	r2, r3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d109      	bne.n	8000dc8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000dc6:	e007      	b.n	8000dd8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d107      	bne.n	8000df0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000df6:	f023 0201 	bic.w	r2, r3, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	e006      	b.n	8000e12 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e08:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
  }
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d12e      	bne.n	8000e8e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2202      	movs	r2, #2
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e48:	f7ff fe1a 	bl	8000a80 <HAL_GetTick>
 8000e4c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e4e:	e012      	b.n	8000e76 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e50:	f7ff fe16 	bl	8000a80 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d90b      	bls.n	8000e76 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e012      	b.n	8000e9c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1e5      	bne.n	8000e50 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e006      	b.n	8000e9c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e92:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
  }
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d003      	beq.n	8000ec8 <HAL_CAN_GetRxMessage+0x24>
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	f040 8103 	bne.w	80010ce <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10e      	bne.n	8000eec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d116      	bne.n	8000f0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e0f7      	b.n	80010dc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d107      	bne.n	8000f0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0e8      	b.n	80010dc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	331b      	adds	r3, #27
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	4413      	add	r3, r2
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0204 	and.w	r2, r3, #4
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10c      	bne.n	8000f42 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	331b      	adds	r3, #27
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	4413      	add	r3, r2
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	0d5b      	lsrs	r3, r3, #21
 8000f38:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e00b      	b.n	8000f5a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	331b      	adds	r3, #27
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	331b      	adds	r3, #27
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	4413      	add	r3, r2
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0202 	and.w	r2, r3, #2
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	331b      	adds	r3, #27
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	e00b      	b.n	8000fa8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	331b      	adds	r3, #27
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 020f 	and.w	r2, r3, #15
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	331b      	adds	r3, #27
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	331b      	adds	r3, #27
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	4413      	add	r3, r2
 8000fcc:	3304      	adds	r3, #4
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	0a1a      	lsrs	r2, r3, #8
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	4413      	add	r3, r2
 8001012:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0c1a      	lsrs	r2, r3, #16
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	3302      	adds	r3, #2
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	4413      	add	r3, r2
 800102c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	0e1a      	lsrs	r2, r3, #24
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3303      	adds	r3, #3
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	4413      	add	r3, r2
 8001046:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	3304      	adds	r3, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4413      	add	r3, r2
 800105e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	0a1a      	lsrs	r2, r3, #8
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3305      	adds	r3, #5
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4413      	add	r3, r2
 8001078:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	0c1a      	lsrs	r2, r3, #16
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	3306      	adds	r3, #6
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	4413      	add	r3, r2
 8001092:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	0e1a      	lsrs	r2, r3, #24
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3307      	adds	r3, #7
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d108      	bne.n	80010ba <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0220 	orr.w	r2, r2, #32
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	e007      	b.n	80010ca <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 0220 	orr.w	r2, r2, #32
 80010c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e006      	b.n	80010dc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
  }
}
 80010dc:	4618      	mov	r0, r3
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b085      	sub	sp, #20
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010fa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010fc:	7afb      	ldrb	r3, [r7, #11]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d002      	beq.n	8001108 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001102:	7afb      	ldrb	r3, [r7, #11]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d10f      	bne.n	8001128 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	e005      	b.n	8001128 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001128:	68fb      	ldr	r3, [r7, #12]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d07c      	beq.n	8001274 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b00      	cmp	r3, #0
 8001182:	d023      	beq.n	80011cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2201      	movs	r2, #1
 800118a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f983 	bl	80014a2 <HAL_CAN_TxMailbox0CompleteCallback>
 800119c:	e016      	b.n	80011cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80011b0:	e00c      	b.n	80011cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011c4:	e002      	b.n	80011cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f986 	bl	80014d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d024      	beq.n	8001220 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f962 	bl	80014b4 <HAL_CAN_TxMailbox1CompleteCallback>
 80011f0:	e016      	b.n	8001220 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
 8001204:	e00c      	b.n	8001220 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
 8001218:	e002      	b.n	8001220 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f965 	bl	80014ea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d024      	beq.n	8001274 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001232:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f941 	bl	80014c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001244:	e016      	b.n	8001274 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
 8001258:	e00c      	b.n	8001274 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
 800126c:	e002      	b.n	8001274 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f944 	bl	80014fc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00c      	beq.n	8001298 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2210      	movs	r2, #16
 8001296:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2208      	movs	r2, #8
 80012b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f933 	bl	8001520 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d009      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f91b 	bl	800150e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00c      	beq.n	80012fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2210      	movs	r2, #16
 80012fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2208      	movs	r2, #8
 8001316:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f913 	bl	8001544 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f8fb 	bl	8001532 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2210      	movs	r2, #16
 8001356:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f8fc 	bl	8001556 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00b      	beq.n	8001380 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2208      	movs	r2, #8
 8001378:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f8f4 	bl	8001568 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d07b      	beq.n	8001482 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d072      	beq.n	800147a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d008      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d008      	beq.n	80013cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d008      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d043      	beq.n	800147a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d03e      	beq.n	800147a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001402:	2b60      	cmp	r3, #96	@ 0x60
 8001404:	d02b      	beq.n	800145e <HAL_CAN_IRQHandler+0x32a>
 8001406:	2b60      	cmp	r3, #96	@ 0x60
 8001408:	d82e      	bhi.n	8001468 <HAL_CAN_IRQHandler+0x334>
 800140a:	2b50      	cmp	r3, #80	@ 0x50
 800140c:	d022      	beq.n	8001454 <HAL_CAN_IRQHandler+0x320>
 800140e:	2b50      	cmp	r3, #80	@ 0x50
 8001410:	d82a      	bhi.n	8001468 <HAL_CAN_IRQHandler+0x334>
 8001412:	2b40      	cmp	r3, #64	@ 0x40
 8001414:	d019      	beq.n	800144a <HAL_CAN_IRQHandler+0x316>
 8001416:	2b40      	cmp	r3, #64	@ 0x40
 8001418:	d826      	bhi.n	8001468 <HAL_CAN_IRQHandler+0x334>
 800141a:	2b30      	cmp	r3, #48	@ 0x30
 800141c:	d010      	beq.n	8001440 <HAL_CAN_IRQHandler+0x30c>
 800141e:	2b30      	cmp	r3, #48	@ 0x30
 8001420:	d822      	bhi.n	8001468 <HAL_CAN_IRQHandler+0x334>
 8001422:	2b10      	cmp	r3, #16
 8001424:	d002      	beq.n	800142c <HAL_CAN_IRQHandler+0x2f8>
 8001426:	2b20      	cmp	r3, #32
 8001428:	d005      	beq.n	8001436 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800142a:	e01d      	b.n	8001468 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800142c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001434:	e019      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800143e:	e014      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	f043 0320 	orr.w	r3, r3, #32
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001448:	e00f      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001452:	e00a      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800145c:	e005      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001466:	e000      	b.n	800146a <HAL_CAN_IRQHandler+0x336>
            break;
 8001468:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	699a      	ldr	r2, [r3, #24]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001478:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2204      	movs	r2, #4
 8001480:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f870 	bl	800157a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	@ (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4906      	ldr	r1, [pc, #24]	@ (8001624 <__NVIC_EnableIRQ+0x34>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	@ (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	@ (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	@ 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	@ 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff90 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff2d 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff42 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff90 	bl	800167c <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5f 	bl	8001628 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff35 	bl	80015f0 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80017a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001880 <HAL_FLASH_Program+0xd8>)
 80017c4:	7e1b      	ldrb	r3, [r3, #24]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_FLASH_Program+0x26>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e054      	b.n	8001878 <HAL_FLASH_Program+0xd0>
 80017ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001880 <HAL_FLASH_Program+0xd8>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017d8:	f000 f8a8 	bl	800192c <FLASH_WaitForLastOperation>
 80017dc:	4603      	mov	r3, r0
 80017de:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d144      	bne.n	8001870 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d102      	bne.n	80017f2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80017ec:	2301      	movs	r3, #1
 80017ee:	757b      	strb	r3, [r7, #21]
 80017f0:	e007      	b.n	8001802 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d102      	bne.n	80017fe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80017f8:	2302      	movs	r3, #2
 80017fa:	757b      	strb	r3, [r7, #21]
 80017fc:	e001      	b.n	8001802 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80017fe:	2304      	movs	r3, #4
 8001800:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001802:	2300      	movs	r3, #0
 8001804:	75bb      	strb	r3, [r7, #22]
 8001806:	e02d      	b.n	8001864 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001808:	7dbb      	ldrb	r3, [r7, #22]
 800180a:	005a      	lsls	r2, r3, #1
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	eb02 0c03 	add.w	ip, r2, r3
 8001812:	7dbb      	ldrb	r3, [r7, #22]
 8001814:	0119      	lsls	r1, r3, #4
 8001816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800181a:	f1c1 0620 	rsb	r6, r1, #32
 800181e:	f1a1 0020 	sub.w	r0, r1, #32
 8001822:	fa22 f401 	lsr.w	r4, r2, r1
 8001826:	fa03 f606 	lsl.w	r6, r3, r6
 800182a:	4334      	orrs	r4, r6
 800182c:	fa23 f000 	lsr.w	r0, r3, r0
 8001830:	4304      	orrs	r4, r0
 8001832:	fa23 f501 	lsr.w	r5, r3, r1
 8001836:	b2a3      	uxth	r3, r4
 8001838:	4619      	mov	r1, r3
 800183a:	4660      	mov	r0, ip
 800183c:	f000 f85a 	bl	80018f4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001840:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001844:	f000 f872 	bl	800192c <FLASH_WaitForLastOperation>
 8001848:	4603      	mov	r3, r0
 800184a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_FLASH_Program+0xdc>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	4a0c      	ldr	r2, [pc, #48]	@ (8001884 <HAL_FLASH_Program+0xdc>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d107      	bne.n	800186e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800185e:	7dbb      	ldrb	r3, [r7, #22]
 8001860:	3301      	adds	r3, #1
 8001862:	75bb      	strb	r3, [r7, #22]
 8001864:	7dba      	ldrb	r2, [r7, #22]
 8001866:	7d7b      	ldrb	r3, [r7, #21]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3cd      	bcc.n	8001808 <HAL_FLASH_Program+0x60>
 800186c:	e000      	b.n	8001870 <HAL_FLASH_Program+0xc8>
      {
        break;
 800186e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001870:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <HAL_FLASH_Program+0xd8>)
 8001872:	2200      	movs	r2, #0
 8001874:	761a      	strb	r2, [r3, #24]

  return status;
 8001876:	7dfb      	ldrb	r3, [r7, #23]
}
 8001878:	4618      	mov	r0, r3
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001880:	20000198 	.word	0x20000198
 8001884:	40022000 	.word	0x40022000

08001888 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <HAL_FLASH_Unlock+0x40>)
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00d      	beq.n	80018ba <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800189e:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <HAL_FLASH_Unlock+0x40>)
 80018a0:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_FLASH_Unlock+0x44>)
 80018a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <HAL_FLASH_Unlock+0x40>)
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <HAL_FLASH_Unlock+0x48>)
 80018a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018aa:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <HAL_FLASH_Unlock+0x40>)
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80018ba:	79fb      	ldrb	r3, [r7, #7]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40022000 	.word	0x40022000
 80018cc:	45670123 	.word	0x45670123
 80018d0:	cdef89ab 	.word	0xcdef89ab

080018d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_FLASH_Lock+0x1c>)
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <HAL_FLASH_Lock+0x1c>)
 80018de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40022000 	.word	0x40022000

080018f4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <FLASH_Program_HalfWord+0x30>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <FLASH_Program_HalfWord+0x34>)
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	4a07      	ldr	r2, [pc, #28]	@ (8001928 <FLASH_Program_HalfWord+0x34>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	887a      	ldrh	r2, [r7, #2]
 8001916:	801a      	strh	r2, [r3, #0]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000198 	.word	0x20000198
 8001928:	40022000 	.word	0x40022000

0800192c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff f8a4 	bl	8000a80 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800193a:	e010      	b.n	800195e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001942:	d00c      	beq.n	800195e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <FLASH_WaitForLastOperation+0x2e>
 800194a:	f7ff f899 	bl	8000a80 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	d201      	bcs.n	800195e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e025      	b.n	80019aa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <FLASH_WaitForLastOperation+0x88>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e8      	bne.n	800193c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <FLASH_WaitForLastOperation+0x88>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <FLASH_WaitForLastOperation+0x88>)
 8001978:	2220      	movs	r2, #32
 800197a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800197c:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <FLASH_WaitForLastOperation+0x88>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10b      	bne.n	80019a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001988:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <FLASH_WaitForLastOperation+0x88>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <FLASH_WaitForLastOperation+0x88>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80019a0:	f000 f80a 	bl	80019b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40022000 	.word	0x40022000

080019b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80019c2:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <FLASH_SetErrorCode+0x98>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80019ce:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <FLASH_SetErrorCode+0x9c>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a54 <FLASH_SetErrorCode+0x9c>)
 80019d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f043 0310 	orr.w	r3, r3, #16
 80019e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80019e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <FLASH_SetErrorCode+0x98>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80019ee:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <FLASH_SetErrorCode+0x9c>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <FLASH_SetErrorCode+0x9c>)
 80019f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001a02:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <FLASH_SetErrorCode+0x98>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <FLASH_SetErrorCode+0x9c>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	4a0f      	ldr	r2, [pc, #60]	@ (8001a54 <FLASH_SetErrorCode+0x9c>)
 8001a18:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <FLASH_SetErrorCode+0x98>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <FLASH_SetErrorCode+0x98>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f240 1201 	movw	r2, #257	@ 0x101
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d106      	bne.n	8001a3e <FLASH_SetErrorCode+0x86>
 8001a30:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <FLASH_SetErrorCode+0x98>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	4a06      	ldr	r2, [pc, #24]	@ (8001a50 <FLASH_SetErrorCode+0x98>)
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	61d3      	str	r3, [r2, #28]
}  
 8001a3c:	e002      	b.n	8001a44 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a3e:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <FLASH_SetErrorCode+0x98>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	60d3      	str	r3, [r2, #12]
}  
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000
 8001a54:	20000198 	.word	0x20000198

08001a58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <HAL_FLASHEx_Erase+0xd0>)
 8001a6c:	7e1b      	ldrb	r3, [r3, #24]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_FLASHEx_Erase+0x1e>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e053      	b.n	8001b1e <HAL_FLASHEx_Erase+0xc6>
 8001a76:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <HAL_FLASHEx_Erase+0xd0>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d116      	bne.n	8001ab2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001a84:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a88:	f7ff ff50 	bl	800192c <FLASH_WaitForLastOperation>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d141      	bne.n	8001b16 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f000 f84c 	bl	8001b30 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a98:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a9c:	f7ff ff46 	bl	800192c <FLASH_WaitForLastOperation>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001aa4:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <HAL_FLASHEx_Erase+0xd4>)
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	4a20      	ldr	r2, [pc, #128]	@ (8001b2c <HAL_FLASHEx_Erase+0xd4>)
 8001aaa:	f023 0304 	bic.w	r3, r3, #4
 8001aae:	6113      	str	r3, [r2, #16]
 8001ab0:	e031      	b.n	8001b16 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001ab2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ab6:	f7ff ff39 	bl	800192c <FLASH_WaitForLastOperation>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d12a      	bne.n	8001b16 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	e019      	b.n	8001b04 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001ad0:	68b8      	ldr	r0, [r7, #8]
 8001ad2:	f000 f849 	bl	8001b68 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ad6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ada:	f7ff ff27 	bl	800192c <FLASH_WaitForLastOperation>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_FLASHEx_Erase+0xd4>)
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <HAL_FLASHEx_Erase+0xd4>)
 8001ae8:	f023 0302 	bic.w	r3, r3, #2
 8001aec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	601a      	str	r2, [r3, #0]
            break;
 8001afa:	e00c      	b.n	8001b16 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b02:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	029a      	lsls	r2, r3, #10
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4413      	add	r3, r2
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d3dc      	bcc.n	8001ad0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b16:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <HAL_FLASHEx_Erase+0xd0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	761a      	strb	r2, [r3, #24]

  return status;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000198 	.word	0x20000198
 8001b2c:	40022000 	.word	0x40022000

08001b30 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <FLASH_MassErase+0x30>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <FLASH_MassErase+0x34>)
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	4a08      	ldr	r2, [pc, #32]	@ (8001b64 <FLASH_MassErase+0x34>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <FLASH_MassErase+0x34>)
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <FLASH_MassErase+0x34>)
 8001b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b54:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	20000198 	.word	0x20000198
 8001b64:	40022000 	.word	0x40022000

08001b68 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <FLASH_PageErase+0x38>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001b76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <FLASH_PageErase+0x3c>)
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <FLASH_PageErase+0x3c>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001b82:	4a08      	ldr	r2, [pc, #32]	@ (8001ba4 <FLASH_PageErase+0x3c>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <FLASH_PageErase+0x3c>)
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <FLASH_PageErase+0x3c>)
 8001b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b92:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000198 	.word	0x20000198
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b08b      	sub	sp, #44	@ 0x2c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	e169      	b.n	8001e90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8158 	bne.w	8001e8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a9a      	ldr	r2, [pc, #616]	@ (8001e48 <HAL_GPIO_Init+0x2a0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d05e      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001be4:	4a98      	ldr	r2, [pc, #608]	@ (8001e48 <HAL_GPIO_Init+0x2a0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d875      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001bea:	4a98      	ldr	r2, [pc, #608]	@ (8001e4c <HAL_GPIO_Init+0x2a4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d058      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001bf0:	4a96      	ldr	r2, [pc, #600]	@ (8001e4c <HAL_GPIO_Init+0x2a4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d86f      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001bf6:	4a96      	ldr	r2, [pc, #600]	@ (8001e50 <HAL_GPIO_Init+0x2a8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d052      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001bfc:	4a94      	ldr	r2, [pc, #592]	@ (8001e50 <HAL_GPIO_Init+0x2a8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d869      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c02:	4a94      	ldr	r2, [pc, #592]	@ (8001e54 <HAL_GPIO_Init+0x2ac>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d04c      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001c08:	4a92      	ldr	r2, [pc, #584]	@ (8001e54 <HAL_GPIO_Init+0x2ac>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d863      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c0e:	4a92      	ldr	r2, [pc, #584]	@ (8001e58 <HAL_GPIO_Init+0x2b0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d046      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001c14:	4a90      	ldr	r2, [pc, #576]	@ (8001e58 <HAL_GPIO_Init+0x2b0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d85d      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d82a      	bhi.n	8001c74 <HAL_GPIO_Init+0xcc>
 8001c1e:	2b12      	cmp	r3, #18
 8001c20:	d859      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c22:	a201      	add	r2, pc, #4	@ (adr r2, 8001c28 <HAL_GPIO_Init+0x80>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001ca3 	.word	0x08001ca3
 8001c2c:	08001c7d 	.word	0x08001c7d
 8001c30:	08001c8f 	.word	0x08001c8f
 8001c34:	08001cd1 	.word	0x08001cd1
 8001c38:	08001cd7 	.word	0x08001cd7
 8001c3c:	08001cd7 	.word	0x08001cd7
 8001c40:	08001cd7 	.word	0x08001cd7
 8001c44:	08001cd7 	.word	0x08001cd7
 8001c48:	08001cd7 	.word	0x08001cd7
 8001c4c:	08001cd7 	.word	0x08001cd7
 8001c50:	08001cd7 	.word	0x08001cd7
 8001c54:	08001cd7 	.word	0x08001cd7
 8001c58:	08001cd7 	.word	0x08001cd7
 8001c5c:	08001cd7 	.word	0x08001cd7
 8001c60:	08001cd7 	.word	0x08001cd7
 8001c64:	08001cd7 	.word	0x08001cd7
 8001c68:	08001cd7 	.word	0x08001cd7
 8001c6c:	08001c85 	.word	0x08001c85
 8001c70:	08001c99 	.word	0x08001c99
 8001c74:	4a79      	ldr	r2, [pc, #484]	@ (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c7a:	e02c      	b.n	8001cd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e029      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e024      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	3308      	adds	r3, #8
 8001c94:	623b      	str	r3, [r7, #32]
          break;
 8001c96:	e01f      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	623b      	str	r3, [r7, #32]
          break;
 8001ca0:	e01a      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001caa:	2304      	movs	r3, #4
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e013      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	611a      	str	r2, [r3, #16]
          break;
 8001cc2:	e009      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	615a      	str	r2, [r3, #20]
          break;
 8001cce:	e003      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
          break;
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          break;
 8001cd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2bff      	cmp	r3, #255	@ 0xff
 8001cdc:	d801      	bhi.n	8001ce2 <HAL_GPIO_Init+0x13a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	e001      	b.n	8001ce6 <HAL_GPIO_Init+0x13e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2bff      	cmp	r3, #255	@ 0xff
 8001cec:	d802      	bhi.n	8001cf4 <HAL_GPIO_Init+0x14c>
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	e002      	b.n	8001cfa <HAL_GPIO_Init+0x152>
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	3b08      	subs	r3, #8
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	210f      	movs	r1, #15
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	6a39      	ldr	r1, [r7, #32]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	431a      	orrs	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80b1 	beq.w	8001e8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d28:	4b4d      	ldr	r3, [pc, #308]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b4a      	ldr	r3, [pc, #296]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d40:	4a48      	ldr	r2, [pc, #288]	@ (8001e64 <HAL_GPIO_Init+0x2bc>)
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a40      	ldr	r2, [pc, #256]	@ (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <HAL_GPIO_Init+0x1ec>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e6c <HAL_GPIO_Init+0x2c4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00d      	beq.n	8001d90 <HAL_GPIO_Init+0x1e8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3e      	ldr	r2, [pc, #248]	@ (8001e70 <HAL_GPIO_Init+0x2c8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d007      	beq.n	8001d8c <HAL_GPIO_Init+0x1e4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e74 <HAL_GPIO_Init+0x2cc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_GPIO_Init+0x1e0>
 8001d84:	2303      	movs	r3, #3
 8001d86:	e006      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d88:	2304      	movs	r3, #4
 8001d8a:	e004      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e002      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d94:	2300      	movs	r3, #0
 8001d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d98:	f002 0203 	and.w	r2, r2, #3
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	4093      	lsls	r3, r2
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001da6:	492f      	ldr	r1, [pc, #188]	@ (8001e64 <HAL_GPIO_Init+0x2bc>)
 8001da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	492c      	ldr	r1, [pc, #176]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dce:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4928      	ldr	r1, [pc, #160]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de8:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	4922      	ldr	r1, [pc, #136]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001df6:	4b20      	ldr	r3, [pc, #128]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	491e      	ldr	r1, [pc, #120]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	4918      	ldr	r1, [pc, #96]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e1e:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4914      	ldr	r1, [pc, #80]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d021      	beq.n	8001e7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e38:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	490e      	ldr	r1, [pc, #56]	@ (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
 8001e44:	e021      	b.n	8001e8a <HAL_GPIO_Init+0x2e2>
 8001e46:	bf00      	nop
 8001e48:	10320000 	.word	0x10320000
 8001e4c:	10310000 	.word	0x10310000
 8001e50:	10220000 	.word	0x10220000
 8001e54:	10210000 	.word	0x10210000
 8001e58:	10120000 	.word	0x10120000
 8001e5c:	10110000 	.word	0x10110000
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	40010c00 	.word	0x40010c00
 8001e70:	40011000 	.word	0x40011000
 8001e74:	40011400 	.word	0x40011400
 8001e78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_GPIO_Init+0x304>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	4909      	ldr	r1, [pc, #36]	@ (8001eac <HAL_GPIO_Init+0x304>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f47f ae8e 	bne.w	8001bbc <HAL_GPIO_Init+0x14>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	372c      	adds	r7, #44	@ 0x2c
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	40010400 	.word	0x40010400

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e272      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8087 	beq.w	8001fde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed0:	4b92      	ldr	r3, [pc, #584]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d00c      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001edc:	4b8f      	ldr	r3, [pc, #572]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d112      	bne.n	8001f0e <HAL_RCC_OscConfig+0x5e>
 8001ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef4:	d10b      	bne.n	8001f0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef6:	4b89      	ldr	r3, [pc, #548]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d06c      	beq.n	8001fdc <HAL_RCC_OscConfig+0x12c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d168      	bne.n	8001fdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e24c      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x76>
 8001f18:	4b80      	ldr	r3, [pc, #512]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a7f      	ldr	r2, [pc, #508]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	e02e      	b.n	8001f84 <HAL_RCC_OscConfig+0xd4>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x98>
 8001f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a7a      	ldr	r2, [pc, #488]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b78      	ldr	r3, [pc, #480]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a77      	ldr	r2, [pc, #476]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e01d      	b.n	8001f84 <HAL_RCC_OscConfig+0xd4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0xbc>
 8001f52:	4b72      	ldr	r3, [pc, #456]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a71      	ldr	r2, [pc, #452]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b6f      	ldr	r3, [pc, #444]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a6e      	ldr	r2, [pc, #440]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0xd4>
 8001f6c:	4b6b      	ldr	r3, [pc, #428]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a6a      	ldr	r2, [pc, #424]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b68      	ldr	r3, [pc, #416]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a67      	ldr	r2, [pc, #412]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe fd78 	bl	8000a80 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7fe fd74 	bl	8000a80 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	@ 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e200      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0xe4>
 8001fb2:	e014      	b.n	8001fde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fd64 	bl	8000a80 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7fe fd60 	bl	8000a80 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	@ 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e1ec      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	4b53      	ldr	r3, [pc, #332]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x10c>
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d063      	beq.n	80020b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fea:	4b4c      	ldr	r3, [pc, #304]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ff6:	4b49      	ldr	r3, [pc, #292]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d11c      	bne.n	800203c <HAL_RCC_OscConfig+0x18c>
 8002002:	4b46      	ldr	r3, [pc, #280]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	4b43      	ldr	r3, [pc, #268]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_RCC_OscConfig+0x176>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e1c0      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4939      	ldr	r1, [pc, #228]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	e03a      	b.n	80020b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002044:	4b36      	ldr	r3, [pc, #216]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7fe fd19 	bl	8000a80 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002052:	f7fe fd15 	bl	8000a80 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e1a1      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	4b2d      	ldr	r3, [pc, #180]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b2a      	ldr	r3, [pc, #168]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4927      	ldr	r1, [pc, #156]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b26      	ldr	r3, [pc, #152]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe fcf8 	bl	8000a80 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002094:	f7fe fcf4 	bl	8000a80 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e180      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d03a      	beq.n	8002134 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d019      	beq.n	80020fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c6:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020cc:	f7fe fcd8 	bl	8000a80 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d4:	f7fe fcd4 	bl	8000a80 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e160      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	4b0d      	ldr	r3, [pc, #52]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f000 fa9c 	bl	8002630 <RCC_Delay>
 80020f8:	e01c      	b.n	8002134 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7fe fcbe 	bl	8000a80 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002106:	e00f      	b.n	8002128 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002108:	f7fe fcba 	bl	8000a80 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d908      	bls.n	8002128 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e146      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	42420000 	.word	0x42420000
 8002124:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	4b92      	ldr	r3, [pc, #584]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e9      	bne.n	8002108 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a6 	beq.w	800228e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b8b      	ldr	r3, [pc, #556]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10d      	bne.n	800216e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b88      	ldr	r3, [pc, #544]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a87      	ldr	r2, [pc, #540]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b85      	ldr	r3, [pc, #532]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216a:	2301      	movs	r3, #1
 800216c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	4b82      	ldr	r3, [pc, #520]	@ (8002378 <HAL_RCC_OscConfig+0x4c8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d118      	bne.n	80021ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217a:	4b7f      	ldr	r3, [pc, #508]	@ (8002378 <HAL_RCC_OscConfig+0x4c8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7e      	ldr	r2, [pc, #504]	@ (8002378 <HAL_RCC_OscConfig+0x4c8>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002186:	f7fe fc7b 	bl	8000a80 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218e:	f7fe fc77 	bl	8000a80 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b64      	cmp	r3, #100	@ 0x64
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e103      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	4b75      	ldr	r3, [pc, #468]	@ (8002378 <HAL_RCC_OscConfig+0x4c8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x312>
 80021b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	e02d      	b.n	800221e <HAL_RCC_OscConfig+0x36e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x334>
 80021ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a69      	ldr	r2, [pc, #420]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4b67      	ldr	r3, [pc, #412]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a66      	ldr	r2, [pc, #408]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	e01c      	b.n	800221e <HAL_RCC_OscConfig+0x36e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d10c      	bne.n	8002206 <HAL_RCC_OscConfig+0x356>
 80021ec:	4b61      	ldr	r3, [pc, #388]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4a60      	ldr	r2, [pc, #384]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e00b      	b.n	800221e <HAL_RCC_OscConfig+0x36e>
 8002206:	4b5b      	ldr	r3, [pc, #364]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a5a      	ldr	r2, [pc, #360]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6213      	str	r3, [r2, #32]
 8002212:	4b58      	ldr	r3, [pc, #352]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a57      	ldr	r2, [pc, #348]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d015      	beq.n	8002252 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7fe fc2b 	bl	8000a80 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe fc27 	bl	8000a80 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0b1      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	4b4b      	ldr	r3, [pc, #300]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ee      	beq.n	800222e <HAL_RCC_OscConfig+0x37e>
 8002250:	e014      	b.n	800227c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7fe fc15 	bl	8000a80 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7fe fc11 	bl	8000a80 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e09b      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	4b40      	ldr	r3, [pc, #256]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ee      	bne.n	800225a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b3c      	ldr	r3, [pc, #240]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4a3b      	ldr	r2, [pc, #236]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800228c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8087 	beq.w	80023a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002298:	4b36      	ldr	r3, [pc, #216]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d061      	beq.n	8002368 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d146      	bne.n	800233a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ac:	4b33      	ldr	r3, [pc, #204]	@ (800237c <HAL_RCC_OscConfig+0x4cc>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7fe fbe5 	bl	8000a80 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7fe fbe1 	bl	8000a80 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e06d      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022cc:	4b29      	ldr	r3, [pc, #164]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e0:	d108      	bne.n	80022f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4921      	ldr	r1, [pc, #132]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a19      	ldr	r1, [r3, #32]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	430b      	orrs	r3, r1
 8002306:	491b      	ldr	r1, [pc, #108]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800230c:	4b1b      	ldr	r3, [pc, #108]	@ (800237c <HAL_RCC_OscConfig+0x4cc>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7fe fbb5 	bl	8000a80 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231a:	f7fe fbb1 	bl	8000a80 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e03d      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x46a>
 8002338:	e035      	b.n	80023a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233a:	4b10      	ldr	r3, [pc, #64]	@ (800237c <HAL_RCC_OscConfig+0x4cc>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe fb9e 	bl	8000a80 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe fb9a 	bl	8000a80 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e026      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x498>
 8002366:	e01e      	b.n	80023a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e019      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
 800237c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <HAL_RCC_OscConfig+0x500>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	429a      	cmp	r2, r3
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0d0      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d910      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b67      	ldr	r3, [pc, #412]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4965      	ldr	r1, [pc, #404]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b63      	ldr	r3, [pc, #396]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0b8      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002410:	4b59      	ldr	r3, [pc, #356]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a58      	ldr	r2, [pc, #352]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800241a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002428:	4b53      	ldr	r3, [pc, #332]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a52      	ldr	r2, [pc, #328]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002432:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4b50      	ldr	r3, [pc, #320]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	494d      	ldr	r1, [pc, #308]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d040      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b47      	ldr	r3, [pc, #284]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d115      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07f      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b41      	ldr	r3, [pc, #260]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e073      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b3d      	ldr	r3, [pc, #244]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e06b      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4b39      	ldr	r3, [pc, #228]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4936      	ldr	r1, [pc, #216]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7fe faec 	bl	8000a80 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7fe fae8 	bl	8000a80 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e053      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b27      	ldr	r3, [pc, #156]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d210      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b24      	ldr	r3, [pc, #144]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 0207 	bic.w	r2, r3, #7
 80024ea:	4922      	ldr	r1, [pc, #136]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b20      	ldr	r3, [pc, #128]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e032      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4916      	ldr	r1, [pc, #88]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800252e:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	490e      	ldr	r1, [pc, #56]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002542:	f000 f821 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002546:	4602      	mov	r2, r0
 8002548:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	490a      	ldr	r1, [pc, #40]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	5ccb      	ldrb	r3, [r1, r3]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a09      	ldr	r2, [pc, #36]	@ (8002580 <HAL_RCC_ClockConfig+0x1cc>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_RCC_ClockConfig+0x1d0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fa4a 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40022000 	.word	0x40022000
 8002578:	40021000 	.word	0x40021000
 800257c:	080031e4 	.word	0x080031e4
 8002580:	20000000 	.word	0x20000000
 8002584:	20000004 	.word	0x20000004

08002588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025a2:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <HAL_RCC_GetSysClockFreq+0x94>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x30>
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d003      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x36>
 80025b6:	e027      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b8:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ba:	613b      	str	r3, [r7, #16]
      break;
 80025bc:	e027      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	0c9b      	lsrs	r3, r3, #18
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	4a17      	ldr	r2, [pc, #92]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025c8:	5cd3      	ldrb	r3, [r2, r3]
 80025ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d010      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d6:	4b11      	ldr	r3, [pc, #68]	@ (800261c <HAL_RCC_GetSysClockFreq+0x94>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0c5b      	lsrs	r3, r3, #17
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	4a11      	ldr	r2, [pc, #68]	@ (8002628 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ea:	fb03 f202 	mul.w	r2, r3, r2
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e004      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a0c      	ldr	r2, [pc, #48]	@ (800262c <HAL_RCC_GetSysClockFreq+0xa4>)
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	613b      	str	r3, [r7, #16]
      break;
 8002606:	e002      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 800260a:	613b      	str	r3, [r7, #16]
      break;
 800260c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260e:	693b      	ldr	r3, [r7, #16]
}
 8002610:	4618      	mov	r0, r3
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	007a1200 	.word	0x007a1200
 8002624:	080031f4 	.word	0x080031f4
 8002628:	08003204 	.word	0x08003204
 800262c:	003d0900 	.word	0x003d0900

08002630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002638:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <RCC_Delay+0x34>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <RCC_Delay+0x38>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0a5b      	lsrs	r3, r3, #9
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800264c:	bf00      	nop
  }
  while (Delay --);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1e5a      	subs	r2, r3, #1
 8002652:	60fa      	str	r2, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f9      	bne.n	800264c <RCC_Delay+0x1c>
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	20000000 	.word	0x20000000
 8002668:	10624dd3 	.word	0x10624dd3

0800266c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e041      	b.n	8002702 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe f880 	bl	8000798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f000 f992 	bl	80029d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_TIM_PWM_Start+0x24>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e022      	b.n	8002776 <HAL_TIM_PWM_Start+0x6a>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b04      	cmp	r3, #4
 8002734:	d109      	bne.n	800274a <HAL_TIM_PWM_Start+0x3e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	e015      	b.n	8002776 <HAL_TIM_PWM_Start+0x6a>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d109      	bne.n	8002764 <HAL_TIM_PWM_Start+0x58>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e008      	b.n	8002776 <HAL_TIM_PWM_Start+0x6a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	bf14      	ite	ne
 8002770:	2301      	movne	r3, #1
 8002772:	2300      	moveq	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e05e      	b.n	800283c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d104      	bne.n	800278e <HAL_TIM_PWM_Start+0x82>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800278c:	e013      	b.n	80027b6 <HAL_TIM_PWM_Start+0xaa>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b04      	cmp	r3, #4
 8002792:	d104      	bne.n	800279e <HAL_TIM_PWM_Start+0x92>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800279c:	e00b      	b.n	80027b6 <HAL_TIM_PWM_Start+0xaa>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d104      	bne.n	80027ae <HAL_TIM_PWM_Start+0xa2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027ac:	e003      	b.n	80027b6 <HAL_TIM_PWM_Start+0xaa>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2201      	movs	r2, #1
 80027bc:	6839      	ldr	r1, [r7, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fafe 	bl	8002dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002844 <HAL_TIM_PWM_Start+0x138>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d107      	bne.n	80027de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a18      	ldr	r2, [pc, #96]	@ (8002844 <HAL_TIM_PWM_Start+0x138>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00e      	beq.n	8002806 <HAL_TIM_PWM_Start+0xfa>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f0:	d009      	beq.n	8002806 <HAL_TIM_PWM_Start+0xfa>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a14      	ldr	r2, [pc, #80]	@ (8002848 <HAL_TIM_PWM_Start+0x13c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d004      	beq.n	8002806 <HAL_TIM_PWM_Start+0xfa>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a12      	ldr	r2, [pc, #72]	@ (800284c <HAL_TIM_PWM_Start+0x140>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d111      	bne.n	800282a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b06      	cmp	r3, #6
 8002816:	d010      	beq.n	800283a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002828:	e007      	b.n	800283a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40012c00 	.word	0x40012c00
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800

08002850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800286a:	2302      	movs	r3, #2
 800286c:	e0ae      	b.n	80029cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b0c      	cmp	r3, #12
 800287a:	f200 809f 	bhi.w	80029bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800287e:	a201      	add	r2, pc, #4	@ (adr r2, 8002884 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	080028b9 	.word	0x080028b9
 8002888:	080029bd 	.word	0x080029bd
 800288c:	080029bd 	.word	0x080029bd
 8002890:	080029bd 	.word	0x080029bd
 8002894:	080028f9 	.word	0x080028f9
 8002898:	080029bd 	.word	0x080029bd
 800289c:	080029bd 	.word	0x080029bd
 80028a0:	080029bd 	.word	0x080029bd
 80028a4:	0800293b 	.word	0x0800293b
 80028a8:	080029bd 	.word	0x080029bd
 80028ac:	080029bd 	.word	0x080029bd
 80028b0:	080029bd 	.word	0x080029bd
 80028b4:	0800297b 	.word	0x0800297b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f8f6 	bl	8002ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0208 	orr.w	r2, r2, #8
 80028d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0204 	bic.w	r2, r2, #4
 80028e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6999      	ldr	r1, [r3, #24]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	619a      	str	r2, [r3, #24]
      break;
 80028f6:	e064      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f93c 	bl	8002b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6999      	ldr	r1, [r3, #24]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	021a      	lsls	r2, r3, #8
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	619a      	str	r2, [r3, #24]
      break;
 8002938:	e043      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 f985 	bl	8002c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0208 	orr.w	r2, r2, #8
 8002954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0204 	bic.w	r2, r2, #4
 8002964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69d9      	ldr	r1, [r3, #28]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	61da      	str	r2, [r3, #28]
      break;
 8002978:	e023      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f9cf 	bl	8002d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69d9      	ldr	r1, [r3, #28]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	021a      	lsls	r2, r3, #8
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	61da      	str	r2, [r3, #28]
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	75fb      	strb	r3, [r7, #23]
      break;
 80029c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa4 <TIM_Base_SetConfig+0xd0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00b      	beq.n	8002a04 <TIM_Base_SetConfig+0x30>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f2:	d007      	beq.n	8002a04 <TIM_Base_SetConfig+0x30>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a2c      	ldr	r2, [pc, #176]	@ (8002aa8 <TIM_Base_SetConfig+0xd4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <TIM_Base_SetConfig+0x30>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a2b      	ldr	r2, [pc, #172]	@ (8002aac <TIM_Base_SetConfig+0xd8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a22      	ldr	r2, [pc, #136]	@ (8002aa4 <TIM_Base_SetConfig+0xd0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00b      	beq.n	8002a36 <TIM_Base_SetConfig+0x62>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a24:	d007      	beq.n	8002a36 <TIM_Base_SetConfig+0x62>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa8 <TIM_Base_SetConfig+0xd4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d003      	beq.n	8002a36 <TIM_Base_SetConfig+0x62>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a1e      	ldr	r2, [pc, #120]	@ (8002aac <TIM_Base_SetConfig+0xd8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa4 <TIM_Base_SetConfig+0xd0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f023 0201 	bic.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	611a      	str	r2, [r3, #16]
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800

08002ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f023 0201 	bic.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f023 0302 	bic.w	r3, r3, #2
 8002af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a1c      	ldr	r2, [pc, #112]	@ (8002b78 <TIM_OC1_SetConfig+0xc8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d10c      	bne.n	8002b26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f023 0308 	bic.w	r3, r3, #8
 8002b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f023 0304 	bic.w	r3, r3, #4
 8002b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a13      	ldr	r2, [pc, #76]	@ (8002b78 <TIM_OC1_SetConfig+0xc8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d111      	bne.n	8002b52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	621a      	str	r2, [r3, #32]
}
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40012c00 	.word	0x40012c00

08002b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f023 0210 	bic.w	r2, r3, #16
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0320 	bic.w	r3, r3, #32
 8002bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <TIM_OC2_SetConfig+0xd0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d10d      	bne.n	8002bf8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a14      	ldr	r2, [pc, #80]	@ (8002c4c <TIM_OC2_SetConfig+0xd0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d113      	bne.n	8002c28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	621a      	str	r2, [r3, #32]
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	40012c00 	.word	0x40012c00

08002c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0303 	bic.w	r3, r3, #3
 8002c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d20 <TIM_OC3_SetConfig+0xd0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d10d      	bne.n	8002cca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a14      	ldr	r2, [pc, #80]	@ (8002d20 <TIM_OC3_SetConfig+0xd0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d113      	bne.n	8002cfa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40012c00 	.word	0x40012c00

08002d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002dbc <TIM_OC4_SetConfig+0x98>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d109      	bne.n	8002d98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	019b      	lsls	r3, r3, #6
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	621a      	str	r2, [r3, #32]
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	40012c00 	.word	0x40012c00

08002dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1a      	ldr	r2, [r3, #32]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	401a      	ands	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a1a      	ldr	r2, [r3, #32]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e046      	b.n	8002eae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a16      	ldr	r2, [pc, #88]	@ (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00e      	beq.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6c:	d009      	beq.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a12      	ldr	r2, [pc, #72]	@ (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a10      	ldr	r2, [pc, #64]	@ (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d10c      	bne.n	8002e9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40000800 	.word	0x40000800

08002ec4 <CAN_Init>:

/**
 * @brief CAN初始化
 */
void CAN_Init()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
    CAN_SetFilters();
 8002ec8:	f000 f814 	bl	8002ef4 <CAN_SetFilters>
    HAL_CAN_Start(&hcan);
 8002ecc:	4807      	ldr	r0, [pc, #28]	@ (8002eec <CAN_Init+0x28>)
 8002ece:	f7fd ffa5 	bl	8000e1c <HAL_CAN_Start>
    /*从Flash中读取privateStdId并写入寄存器*/
    privateStdId = Flash_ReadFilterDataToPage64();
 8002ed2:	f000 f902 	bl	80030da <Flash_ReadFilterDataToPage64>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4a05      	ldr	r2, [pc, #20]	@ (8002ef0 <CAN_Init+0x2c>)
 8002eda:	6013      	str	r3, [r2, #0]
    CAN_SetBank1Filters(privateStdId);
 8002edc:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <CAN_Init+0x2c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f82f 	bl	8002f44 <CAN_SetBank1Filters>
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2000006c 	.word	0x2000006c
 8002ef0:	200001b8 	.word	0x200001b8

08002ef4 <CAN_SetFilters>:
 *
 * @param
 * @return 初始化状态
 */
HAL_StatusTypeDef CAN_SetFilters()
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08c      	sub	sp, #48	@ 0x30
 8002ef8:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef canFilter;

    // 2. 设置 bank1 的筛选器
    canFilter.FilterBank = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
    canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
    canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002f02:	2301      	movs	r3, #1
 8002f04:	623b      	str	r3, [r7, #32]

    // STID = 0x0000, IDE = 0, RTR = 0 (广播)
    canFilter.FilterIdHigh = 0x0000;
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]
    canFilter.FilterIdLow = 0x0000;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
    canFilter.FilterMaskIdHigh = 0xffe0;
 8002f0e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002f12:	60fb      	str	r3, [r7, #12]
    // canFilter.FilterMaskIdHigh = 0x0000;
    canFilter.FilterMaskIdLow = 0x0006;
 8002f14:	2306      	movs	r3, #6
 8002f16:	613b      	str	r3, [r7, #16]
    // canFilter.FilterMaskIdLow = 0x0000;

    canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
    canFilter.FilterActivation = CAN_FILTER_ENABLE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    canFilter.SlaveStartFilterBank = 14;
 8002f20:	230e      	movs	r3, #14
 8002f22:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_StatusTypeDef result = HAL_CAN_ConfigFilter(&hcan, &canFilter);
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	4619      	mov	r1, r3
 8002f28:	4805      	ldr	r0, [pc, #20]	@ (8002f40 <CAN_SetFilters+0x4c>)
 8002f2a:	f7fd feae 	bl	8000c8a <HAL_CAN_ConfigFilter>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    return result;
 8002f34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3730      	adds	r7, #48	@ 0x30
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	2000006c 	.word	0x2000006c

08002f44 <CAN_SetBank1Filters>:
 * @param stdId 设置 Bank1 筛选器的过滤 ID，用于私有消息接收
 *
 * @return 返回设置结果
 */
HAL_StatusTypeDef CAN_SetBank1Filters(uint32_t stdId)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08e      	sub	sp, #56	@ 0x38
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef canFilter;
    // 2. 设置 bank1 的筛选器
    canFilter.FilterBank = 1;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	623b      	str	r3, [r7, #32]
    canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
    canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002f54:	2301      	movs	r3, #1
 8002f56:	62bb      	str	r3, [r7, #40]	@ 0x28

    // 设置 Filter Bank0 的 stdId
    canFilter.FilterIdHigh = (stdId << 5);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	015b      	lsls	r3, r3, #5
 8002f5c:	60fb      	str	r3, [r7, #12]
    canFilter.FilterIdLow = 0x0000;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
    canFilter.FilterMaskIdHigh = 0xffe0;
 8002f62:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002f66:	617b      	str	r3, [r7, #20]
    canFilter.FilterMaskIdLow = 0x0006;
 8002f68:	2306      	movs	r3, #6
 8002f6a:	61bb      	str	r3, [r7, #24]

    canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
    canFilter.FilterActivation = CAN_FILTER_ENABLE;
 8002f70:	2301      	movs	r3, #1
 8002f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_StatusTypeDef result = HAL_CAN_ConfigFilter(&hcan, &canFilter);
 8002f74:	f107 030c 	add.w	r3, r7, #12
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4806      	ldr	r0, [pc, #24]	@ (8002f94 <CAN_SetBank1Filters+0x50>)
 8002f7c:	f7fd fe85 	bl	8000c8a <HAL_CAN_ConfigFilter>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    return result;
 8002f86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3738      	adds	r7, #56	@ 0x38
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	2000006c 	.word	0x2000006c

08002f98 <SERVO_MsgProcess>:
/**
 * @brief 舵机控制函数，对CAN接收到的数据进行解析，并设置PWM通道的比较器
 * @param Rxdata CAN接受到的数据
 */
void SERVO_MsgProcess(uint8_t *Rxdata)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
    if (Rxdata[0] == 0x01)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d116      	bne.n	8002fd6 <SERVO_MsgProcess+0x3e>
    {
        uint8_t servoId = Rxdata[1];
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	785b      	ldrb	r3, [r3, #1]
 8002fac:	75fb      	strb	r3, [r7, #23]
        int angleData = (Rxdata[2] << 8) + Rxdata[3];
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	3203      	adds	r2, #3
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        int ccr2 = 2500 - angleData;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f5c3 631c 	rsb	r3, r3, #2496	@ 0x9c0
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	60fb      	str	r3, [r7, #12]
        PWM_SetCompare(servoId, ccr2);
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 f88b 	bl	80030ec <PWM_SetCompare>
    }
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <FILTER_MsgProcess>:
/**
 * @brief 设置私有过滤器ID，对CAN接收到的数据进行解析，并设置私有过滤器ID
 * @param Rxdata CAN接受到的数据
 */
void FILTER_MsgProcess(uint8_t *Rxdata)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
    if (Rxdata[0] == 0x00)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10e      	bne.n	800300c <FILTER_MsgProcess+0x2e>
    {
        uint32_t stdId = (Rxdata[1] << 8) + Rxdata[2];
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	3202      	adds	r2, #2
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
        CAN_SetBank1Filters(stdId);
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff ff9f 	bl	8002f44 <CAN_SetBank1Filters>
        Flash_WriteFilterDataToPage64(stdId);
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f85b 	bl	80030c2 <Flash_WriteFilterDataToPage64>
    }
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <Flash_ErasePage64>:

/**
 * @brief 解锁Flash，擦除页
 */
void Flash_ErasePage64(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
    // 解锁Flash
    HAL_FLASH_Unlock();
 800301a:	f7fe fc35 	bl	8001888 <HAL_FLASH_Unlock>

    // 配置擦除结构体
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	607b      	str	r3, [r7, #4]

    // 擦除第64页
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
    eraseInitStruct.PageAddress = 0x0800FC00; // 第64页的起始地址
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <Flash_ErasePage64+0x40>)
 8003028:	613b      	str	r3, [r7, #16]
    eraseInitStruct.NbPages = 1;              // 只擦除1页（1KB）
 800302a:	2301      	movs	r3, #1
 800302c:	617b      	str	r3, [r7, #20]

    // 执行擦除
    if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK)
 800302e:	1d3a      	adds	r2, r7, #4
 8003030:	f107 0308 	add.w	r3, r7, #8
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fd0e 	bl	8001a58 <HAL_FLASHEx_Erase>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <Flash_ErasePage64+0x32>
    {
        // 处理擦除错误
        Error_Handler();
 8003042:	f7fd f9f0 	bl	8000426 <Error_Handler>
    }

    // 锁定Flash
    HAL_FLASH_Lock();
 8003046:	f7fe fc45 	bl	80018d4 <HAL_FLASH_Lock>
}
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	0800fc00 	.word	0x0800fc00

08003058 <Flash_WriteDataToPage64>:
 * @brief 写入数据到末页
 * @param addressOffset 指定的偏移地址（32的整数倍0x20）
 * @param data 32位的数据
 */
void Flash_WriteDataToPage64(uint32_t addressOffset, uint32_t data)
{
 8003058:	b5b0      	push	{r4, r5, r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
    // 清除页数据
    Flash_ErasePage64();
 8003062:	f7ff ffd7 	bl	8003014 <Flash_ErasePage64>

    // 解锁Flash
    HAL_FLASH_Unlock();
 8003066:	f7fe fc0f 	bl	8001888 <HAL_FLASH_Unlock>

    // 将数据写入指定偏移地址
    uint32_t address = 0x0800FC00 + addressOffset;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8003070:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
 8003074:	60fb      	str	r3, [r7, #12]
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	461c      	mov	r4, r3
 800307c:	4615      	mov	r5, r2
 800307e:	4622      	mov	r2, r4
 8003080:	462b      	mov	r3, r5
 8003082:	68f9      	ldr	r1, [r7, #12]
 8003084:	2002      	movs	r0, #2
 8003086:	f7fe fb8f 	bl	80017a8 <HAL_FLASH_Program>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <Flash_WriteDataToPage64+0x3c>
    {
        // 写入错误处理
        Error_Handler();
 8003090:	f7fd f9c9 	bl	8000426 <Error_Handler>
//        HAL_UART_Transmit(&huart1, "E01", 3, 5);
    }

    // 锁定Flash
    HAL_FLASH_Lock();
 8003094:	f7fe fc1e 	bl	80018d4 <HAL_FLASH_Lock>
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bdb0      	pop	{r4, r5, r7, pc}

080030a0 <Flash_ReadDataFromPage64>:
 * @brief 读取末页数据
 * @param addressOffset 指定的偏移地址（32的整数倍0x20）
 * @return 读取到的32位数据
 */
uint32_t Flash_ReadDataFromPage64(uint32_t addressOffset)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
    // 从指定的偏移地址读取数据
    uint32_t address = 0x0800FC00 + addressOffset;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80030ae:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
 80030b2:	60fb      	str	r3, [r7, #12]
    return *(uint32_t *)address;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <Flash_WriteFilterDataToPage64>:
/**
 * @brief 写入储存器配置
 * @param filterId 储存器ID
 */
void Flash_WriteFilterDataToPage64(uint32_t filterId)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
    Flash_WriteDataToPage64(0x00000020, filterId);
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	2020      	movs	r0, #32
 80030ce:	f7ff ffc3 	bl	8003058 <Flash_WriteDataToPage64>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <Flash_ReadFilterDataToPage64>:
/**
 * @brief 读取储存器配置
 * @return filterId 读取到的储存器ID
 */
uint32_t Flash_ReadFilterDataToPage64()
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	af00      	add	r7, sp, #0
    return Flash_ReadDataFromPage64(0x00000020);
 80030de:	2020      	movs	r0, #32
 80030e0:	f7ff ffde 	bl	80030a0 <Flash_ReadDataFromPage64>
 80030e4:	4603      	mov	r3, r0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <PWM_SetCompare>:
 * @brief 设置PWM比较器
 * @param channelIndex 通道引索数
 * @param compareValue 设置通道比较器的值
 */
void PWM_SetCompare(uint8_t channelIndex, uint32_t compareValue)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
    if (channelIndex < NUM_PWM_CHANNELS)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	2b07      	cmp	r3, #7
 80030fc:	d833      	bhi.n	8003166 <PWM_SetCompare+0x7a>
    {
        __HAL_TIM_SetCompare(pwm_channels[channelIndex].htim, pwm_channels[channelIndex].channel, compareValue);
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	4a1b      	ldr	r2, [pc, #108]	@ (8003170 <PWM_SetCompare+0x84>)
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <PWM_SetCompare+0x30>
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <PWM_SetCompare+0x84>)
 8003110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 800311a:	e024      	b.n	8003166 <PWM_SetCompare+0x7a>
        __HAL_TIM_SetCompare(pwm_channels[channelIndex].htim, pwm_channels[channelIndex].channel, compareValue);
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	4a14      	ldr	r2, [pc, #80]	@ (8003170 <PWM_SetCompare+0x84>)
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b04      	cmp	r3, #4
 8003128:	d107      	bne.n	800313a <PWM_SetCompare+0x4e>
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	4a10      	ldr	r2, [pc, #64]	@ (8003170 <PWM_SetCompare+0x84>)
 800312e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003138:	e015      	b.n	8003166 <PWM_SetCompare+0x7a>
        __HAL_TIM_SetCompare(pwm_channels[channelIndex].htim, pwm_channels[channelIndex].channel, compareValue);
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	4a0c      	ldr	r2, [pc, #48]	@ (8003170 <PWM_SetCompare+0x84>)
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d107      	bne.n	8003158 <PWM_SetCompare+0x6c>
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	4a09      	ldr	r2, [pc, #36]	@ (8003170 <PWM_SetCompare+0x84>)
 800314c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003156:	e006      	b.n	8003166 <PWM_SetCompare+0x7a>
        __HAL_TIM_SetCompare(pwm_channels[channelIndex].htim, pwm_channels[channelIndex].channel, compareValue);
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	4a05      	ldr	r2, [pc, #20]	@ (8003170 <PWM_SetCompare+0x84>)
 800315c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	2000000c 	.word	0x2000000c

08003174 <memset>:
 8003174:	4603      	mov	r3, r0
 8003176:	4402      	add	r2, r0
 8003178:	4293      	cmp	r3, r2
 800317a:	d100      	bne.n	800317e <memset+0xa>
 800317c:	4770      	bx	lr
 800317e:	f803 1b01 	strb.w	r1, [r3], #1
 8003182:	e7f9      	b.n	8003178 <memset+0x4>

08003184 <__libc_init_array>:
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	2600      	movs	r6, #0
 8003188:	4d0c      	ldr	r5, [pc, #48]	@ (80031bc <__libc_init_array+0x38>)
 800318a:	4c0d      	ldr	r4, [pc, #52]	@ (80031c0 <__libc_init_array+0x3c>)
 800318c:	1b64      	subs	r4, r4, r5
 800318e:	10a4      	asrs	r4, r4, #2
 8003190:	42a6      	cmp	r6, r4
 8003192:	d109      	bne.n	80031a8 <__libc_init_array+0x24>
 8003194:	f000 f81a 	bl	80031cc <_init>
 8003198:	2600      	movs	r6, #0
 800319a:	4d0a      	ldr	r5, [pc, #40]	@ (80031c4 <__libc_init_array+0x40>)
 800319c:	4c0a      	ldr	r4, [pc, #40]	@ (80031c8 <__libc_init_array+0x44>)
 800319e:	1b64      	subs	r4, r4, r5
 80031a0:	10a4      	asrs	r4, r4, #2
 80031a2:	42a6      	cmp	r6, r4
 80031a4:	d105      	bne.n	80031b2 <__libc_init_array+0x2e>
 80031a6:	bd70      	pop	{r4, r5, r6, pc}
 80031a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ac:	4798      	blx	r3
 80031ae:	3601      	adds	r6, #1
 80031b0:	e7ee      	b.n	8003190 <__libc_init_array+0xc>
 80031b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b6:	4798      	blx	r3
 80031b8:	3601      	adds	r6, #1
 80031ba:	e7f2      	b.n	80031a2 <__libc_init_array+0x1e>
 80031bc:	08003208 	.word	0x08003208
 80031c0:	08003208 	.word	0x08003208
 80031c4:	08003208 	.word	0x08003208
 80031c8:	0800320c 	.word	0x0800320c

080031cc <_init>:
 80031cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ce:	bf00      	nop
 80031d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d2:	bc08      	pop	{r3}
 80031d4:	469e      	mov	lr, r3
 80031d6:	4770      	bx	lr

080031d8 <_fini>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	bf00      	nop
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr
