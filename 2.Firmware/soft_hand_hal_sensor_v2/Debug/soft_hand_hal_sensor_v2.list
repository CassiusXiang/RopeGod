
soft_hand_hal_sensor_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080036dc  080036dc  000046dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003720  08003720  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003720  08003720  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003720  08003720  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003720  08003720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003724  08003724  00004724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003728  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000010  08003734  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003734  00005134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7cf  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002895  00000000  00000000  00010804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  000130a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081c  00000000  00000000  00013b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b33b  00000000  00000000  0001437c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe73  00000000  00000000  0002f6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098886  00000000  00000000  0003f52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7db0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e0  00000000  00000000  000d7df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000da6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	080036c4 	.word	0x080036c4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	080036c4 	.word	0x080036c4

08000224 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b67      	ldr	r3, [pc, #412]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 8000236:	4a68      	ldr	r2, [pc, #416]	@ (80003d8 <MX_ADC1_Init+0x1b4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023a:	4b66      	ldr	r3, [pc, #408]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 800023c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000242:	4b64      	ldr	r3, [pc, #400]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 8000244:	2200      	movs	r2, #0
 8000246:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000248:	4b62      	ldr	r3, [pc, #392]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 800024a:	2201      	movs	r2, #1
 800024c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 800024e:	4b61      	ldr	r3, [pc, #388]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 8000250:	2201      	movs	r2, #1
 8000252:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000254:	4b5f      	ldr	r3, [pc, #380]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 8000256:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800025a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025c:	4b5d      	ldr	r3, [pc, #372]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 800025e:	2200      	movs	r2, #0
 8000260:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 12;
 8000262:	4b5c      	ldr	r3, [pc, #368]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 8000264:	220c      	movs	r2, #12
 8000266:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000268:	485a      	ldr	r0, [pc, #360]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 800026a:	f000 fc15 	bl	8000a98 <HAL_ADC_Init>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8000274:	f000 fa83 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000278:	2301      	movs	r3, #1
 800027a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027c:	2301      	movs	r3, #1
 800027e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	4619      	mov	r1, r3
 8000288:	4852      	ldr	r0, [pc, #328]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 800028a:	f000 feaf 	bl	8000fec <HAL_ADC_ConfigChannel>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000294:	f000 fa73 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000298:	2302      	movs	r3, #2
 800029a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800029c:	2302      	movs	r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4619      	mov	r1, r3
 80002a4:	484b      	ldr	r0, [pc, #300]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 80002a6:	f000 fea1 	bl	8000fec <HAL_ADC_ConfigChannel>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80002b0:	f000 fa65 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002b4:	2303      	movs	r3, #3
 80002b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002b8:	2303      	movs	r3, #3
 80002ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	4619      	mov	r1, r3
 80002c0:	4844      	ldr	r0, [pc, #272]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 80002c2:	f000 fe93 	bl	8000fec <HAL_ADC_ConfigChannel>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80002cc:	f000 fa57 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002d0:	2304      	movs	r3, #4
 80002d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002d4:	2304      	movs	r3, #4
 80002d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4619      	mov	r1, r3
 80002dc:	483d      	ldr	r0, [pc, #244]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 80002de:	f000 fe85 	bl	8000fec <HAL_ADC_ConfigChannel>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80002e8:	f000 fa49 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002ec:	2305      	movs	r3, #5
 80002ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80002f0:	2305      	movs	r3, #5
 80002f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	4619      	mov	r1, r3
 80002f8:	4836      	ldr	r0, [pc, #216]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 80002fa:	f000 fe77 	bl	8000fec <HAL_ADC_ConfigChannel>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000304:	f000 fa3b 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000308:	2306      	movs	r3, #6
 800030a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800030c:	2306      	movs	r3, #6
 800030e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4619      	mov	r1, r3
 8000314:	482f      	ldr	r0, [pc, #188]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 8000316:	f000 fe69 	bl	8000fec <HAL_ADC_ConfigChannel>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000320:	f000 fa2d 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000324:	2307      	movs	r3, #7
 8000326:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000328:	2307      	movs	r3, #7
 800032a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4619      	mov	r1, r3
 8000330:	4828      	ldr	r0, [pc, #160]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 8000332:	f000 fe5b 	bl	8000fec <HAL_ADC_ConfigChannel>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800033c:	f000 fa1f 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000340:	2308      	movs	r3, #8
 8000342:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000344:	2308      	movs	r3, #8
 8000346:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4619      	mov	r1, r3
 800034c:	4821      	ldr	r0, [pc, #132]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 800034e:	f000 fe4d 	bl	8000fec <HAL_ADC_ConfigChannel>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000358:	f000 fa11 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800035c:	2309      	movs	r3, #9
 800035e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000360:	2309      	movs	r3, #9
 8000362:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	481a      	ldr	r0, [pc, #104]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 800036a:	f000 fe3f 	bl	8000fec <HAL_ADC_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000374:	f000 fa03 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000378:	230a      	movs	r3, #10
 800037a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800037c:	230a      	movs	r3, #10
 800037e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4619      	mov	r1, r3
 8000384:	4813      	ldr	r0, [pc, #76]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 8000386:	f000 fe31 	bl	8000fec <HAL_ADC_ConfigChannel>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000390:	f000 f9f5 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000394:	230b      	movs	r3, #11
 8000396:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000398:	230b      	movs	r3, #11
 800039a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	4619      	mov	r1, r3
 80003a0:	480c      	ldr	r0, [pc, #48]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 80003a2:	f000 fe23 	bl	8000fec <HAL_ADC_ConfigChannel>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80003ac:	f000 f9e7 	bl	800077e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80003b0:	230c      	movs	r3, #12
 80003b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80003b4:	230c      	movs	r3, #12
 80003b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	4619      	mov	r1, r3
 80003bc:	4805      	ldr	r0, [pc, #20]	@ (80003d4 <MX_ADC1_Init+0x1b0>)
 80003be:	f000 fe15 	bl	8000fec <HAL_ADC_ConfigChannel>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80003c8:	f000 f9d9 	bl	800077e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	2000002c 	.word	0x2000002c
 80003d8:	40012400 	.word	0x40012400

080003dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	@ 0x28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e4:	f107 0318 	add.w	r3, r7, #24
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a2a      	ldr	r2, [pc, #168]	@ (80004a0 <HAL_ADC_MspInit+0xc4>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d14d      	bne.n	8000498 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003fc:	4b29      	ldr	r3, [pc, #164]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a28      	ldr	r2, [pc, #160]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 8000402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b26      	ldr	r3, [pc, #152]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000414:	4b23      	ldr	r3, [pc, #140]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a22      	ldr	r2, [pc, #136]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 800041a:	f043 0310 	orr.w	r3, r3, #16
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b20      	ldr	r3, [pc, #128]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0310 	and.w	r3, r3, #16
 8000428:	613b      	str	r3, [r7, #16]
 800042a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	4b1d      	ldr	r3, [pc, #116]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a16      	ldr	r2, [pc, #88]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <HAL_ADC_MspInit+0xc8>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0308 	and.w	r3, r3, #8
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800045c:	2307      	movs	r3, #7
 800045e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000460:	2303      	movs	r3, #3
 8000462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000464:	f107 0318 	add.w	r3, r7, #24
 8000468:	4619      	mov	r1, r3
 800046a:	480f      	ldr	r0, [pc, #60]	@ (80004a8 <HAL_ADC_MspInit+0xcc>)
 800046c:	f001 fe54 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000470:	23fe      	movs	r3, #254	@ 0xfe
 8000472:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000474:	2303      	movs	r3, #3
 8000476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	f107 0318 	add.w	r3, r7, #24
 800047c:	4619      	mov	r1, r3
 800047e:	480b      	ldr	r0, [pc, #44]	@ (80004ac <HAL_ADC_MspInit+0xd0>)
 8000480:	f001 fe4a 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000484:	2303      	movs	r3, #3
 8000486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000488:	2303      	movs	r3, #3
 800048a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048c:	f107 0318 	add.w	r3, r7, #24
 8000490:	4619      	mov	r1, r3
 8000492:	4807      	ldr	r0, [pc, #28]	@ (80004b0 <HAL_ADC_MspInit+0xd4>)
 8000494:	f001 fe40 	bl	8002118 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000498:	bf00      	nop
 800049a:	3728      	adds	r7, #40	@ 0x28
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40012400 	.word	0x40012400
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40011000 	.word	0x40011000
 80004ac:	40010800 	.word	0x40010800
 80004b0:	40010c00 	.word	0x40010c00

080004b4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80004b8:	4b17      	ldr	r3, [pc, #92]	@ (8000518 <MX_CAN_Init+0x64>)
 80004ba:	4a18      	ldr	r2, [pc, #96]	@ (800051c <MX_CAN_Init+0x68>)
 80004bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80004be:	4b16      	ldr	r3, [pc, #88]	@ (8000518 <MX_CAN_Init+0x64>)
 80004c0:	2206      	movs	r2, #6
 80004c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004c4:	4b14      	ldr	r3, [pc, #80]	@ (8000518 <MX_CAN_Init+0x64>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ca:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <MX_CAN_Init+0x64>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 80004d0:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <MX_CAN_Init+0x64>)
 80004d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80004d6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <MX_CAN_Init+0x64>)
 80004da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80004de:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000518 <MX_CAN_Init+0x64>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <MX_CAN_Init+0x64>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000518 <MX_CAN_Init+0x64>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004f2:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <MX_CAN_Init+0x64>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004f8:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <MX_CAN_Init+0x64>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004fe:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <MX_CAN_Init+0x64>)
 8000500:	2200      	movs	r2, #0
 8000502:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000504:	4804      	ldr	r0, [pc, #16]	@ (8000518 <MX_CAN_Init+0x64>)
 8000506:	f000 ff04 	bl	8001312 <HAL_CAN_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000510:	f000 f935 	bl	800077e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2000005c 	.word	0x2000005c
 800051c:	40006400 	.word	0x40006400

08000520 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a1c      	ldr	r2, [pc, #112]	@ (80005ac <HAL_CAN_MspInit+0x8c>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d131      	bne.n	80005a4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000540:	4b1b      	ldr	r3, [pc, #108]	@ (80005b0 <HAL_CAN_MspInit+0x90>)
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	4a1a      	ldr	r2, [pc, #104]	@ (80005b0 <HAL_CAN_MspInit+0x90>)
 8000546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800054a:	61d3      	str	r3, [r2, #28]
 800054c:	4b18      	ldr	r3, [pc, #96]	@ (80005b0 <HAL_CAN_MspInit+0x90>)
 800054e:	69db      	ldr	r3, [r3, #28]
 8000550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <HAL_CAN_MspInit+0x90>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <HAL_CAN_MspInit+0x90>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <HAL_CAN_MspInit+0x90>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000570:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	4619      	mov	r1, r3
 8000584:	480b      	ldr	r0, [pc, #44]	@ (80005b4 <HAL_CAN_MspInit+0x94>)
 8000586:	f001 fdc7 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800058a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800058e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000590:	2302      	movs	r3, #2
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000594:	2303      	movs	r3, #3
 8000596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4619      	mov	r1, r3
 800059e:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <HAL_CAN_MspInit+0x94>)
 80005a0:	f001 fdba 	bl	8002118 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005a4:	bf00      	nop
 80005a6:	3720      	adds	r7, #32
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40006400 	.word	0x40006400
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40010800 	.word	0x40010800

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a13      	ldr	r2, [pc, #76]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a0d      	ldr	r2, [pc, #52]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0304 	and.w	r3, r3, #4
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a07      	ldr	r2, [pc, #28]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005f4:	f043 0308 	orr.w	r3, r3, #8
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0308 	and.w	r3, r3, #8
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of asll peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 f9b7 	bl	800098c <HAL_Init>
HAL_Delay(1000);
 800061e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000622:	f000 fa15 	bl	8000a50 <HAL_Delay>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f84d 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f7ff ffc5 	bl	80005b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800062e:	f7ff fdf9 	bl	8000224 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000632:	f000 f90f 	bl	8000854 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000636:	f7ff ff3d 	bl	80004b4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
    //    HAL_UART_Transmit(&huart1, "init", 4, 4);
    CAN_Init();
 800063a:	f002 fed5 	bl	80033e8 <CAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        for (int i = 0; i < 12; i++)
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e00a      	b.n	800065a <main+0x46>
        {
            adcValue[i] = get_adc_value();
 8000644:	f002 febe 	bl	80033c4 <get_adc_value>
 8000648:	4603      	mov	r3, r0
 800064a:	b299      	uxth	r1, r3
 800064c:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <main+0xa0>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int i = 0; i < 12; i++)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3301      	adds	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b0b      	cmp	r3, #11
 800065e:	ddf1      	ble.n	8000644 <main+0x30>
        }
        for (int i = 0; i < 12; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	e00b      	b.n	800067e <main+0x6a>
        {
        	PRESSURE_Send(i, adcValue);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	4912      	ldr	r1, [pc, #72]	@ (80006b4 <main+0xa0>)
 800066c:	4618      	mov	r0, r3
 800066e:	f002 ff43 	bl	80034f8 <PRESSURE_Send>
            HAL_Delay(3);
 8000672:	2003      	movs	r0, #3
 8000674:	f000 f9ec 	bl	8000a50 <HAL_Delay>
        for (int i = 0; i < 12; i++)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b0b      	cmp	r3, #11
 8000682:	ddf0      	ble.n	8000666 <main+0x52>
        }
        if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 1)
 8000684:	2100      	movs	r1, #0
 8000686:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <main+0xa4>)
 8000688:	f001 fa3b 	bl	8001b02 <HAL_CAN_GetRxFifoFillLevel>
        {
        }
        if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 800068c:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <main+0xa8>)
 800068e:	4a0c      	ldr	r2, [pc, #48]	@ (80006c0 <main+0xac>)
 8000690:	2100      	movs	r1, #0
 8000692:	4809      	ldr	r0, [pc, #36]	@ (80006b8 <main+0xa4>)
 8000694:	f001 f914 	bl	80018c0 <HAL_CAN_GetRxMessage>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1cf      	bne.n	800063e <main+0x2a>
        {

            switch (RxHeader.FilterMatchIndex)
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <main+0xac>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <main+0x96>
 80006a6:	2b01      	cmp	r3, #1
            case 1:
#ifdef TEST_MODE
                HAL_UART_Transmit(&huart1, "Bank1Recived", 12, 5);
#endif
//                PRESSURE_MsgProcess(RxData, adcValue);
                break;
 80006a8:	e003      	b.n	80006b2 <main+0x9e>
                FILTER_MsgProcess(RxData);
 80006aa:	4804      	ldr	r0, [pc, #16]	@ (80006bc <main+0xa8>)
 80006ac:	f002 ff08 	bl	80034c0 <FILTER_MsgProcess>
                break;
 80006b0:	bf00      	nop
        for (int i = 0; i < 12; i++)
 80006b2:	e7c4      	b.n	800063e <main+0x2a>
 80006b4:	20000084 	.word	0x20000084
 80006b8:	2000005c 	.word	0x2000005c
 80006bc:	200000b8 	.word	0x200000b8
 80006c0:	2000009c 	.word	0x2000009c

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b096      	sub	sp, #88	@ 0x58
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006ce:	2228      	movs	r2, #40	@ 0x28
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 ffc9 	bl	800366a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
 80006f6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000700:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000712:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000714:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000718:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fe8e 	bl	8002440 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800072a:	f000 f828 	bl	800077e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800073e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	2102      	movs	r1, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f002 f8fa 	bl	8002944 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000756:	f000 f812 	bl	800077e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800075a:	2302      	movs	r3, #2
 800075c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800075e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000762:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fa7a 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000772:	f000 f804 	bl	800077e <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3758      	adds	r7, #88	@ 0x58
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000782:	b672      	cpsid	i
}
 8000784:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000786:	bf00      	nop
 8000788:	e7fd      	b.n	8000786 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <HAL_MspInit+0x5c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a14      	ldr	r2, [pc, #80]	@ (80007e8 <HAL_MspInit+0x5c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007c2:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <HAL_MspInit+0x60>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <HAL_MspInit+0x60>)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010000 	.word	0x40010000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <NMI_Handler+0x4>

080007f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <MemManage_Handler+0x4>

08000808 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <UsageFault_Handler+0x4>

08000818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000840:	f000 f8ea 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_USART1_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <MX_USART1_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_USART1_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_USART1_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_USART1_UART_Init+0x4c>)
 800088c:	f002 fb76 	bl	8002f7c <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f7ff ff72 	bl	800077e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000c0 	.word	0x200000c0
 80008a4:	40013800 	.word	0x40013800

080008a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <HAL_UART_MspInit+0x8c>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d131      	bne.n	800092c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <HAL_UART_MspInit+0x90>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a1a      	ldr	r2, [pc, #104]	@ (8000938 <HAL_UART_MspInit+0x90>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <HAL_UART_MspInit+0x90>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_UART_MspInit+0x90>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a14      	ldr	r2, [pc, #80]	@ (8000938 <HAL_UART_MspInit+0x90>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_UART_MspInit+0x90>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	4619      	mov	r1, r3
 800090c:	480b      	ldr	r0, [pc, #44]	@ (800093c <HAL_UART_MspInit+0x94>)
 800090e:	f001 fc03 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4619      	mov	r1, r3
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <HAL_UART_MspInit+0x94>)
 8000928:	f001 fbf6 	bl	8002118 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40013800 	.word	0x40013800
 8000938:	40021000 	.word	0x40021000
 800093c:	40010800 	.word	0x40010800

08000940 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000940:	f7ff ff82 	bl	8000848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000944:	480b      	ldr	r0, [pc, #44]	@ (8000974 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000946:	490c      	ldr	r1, [pc, #48]	@ (8000978 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000948:	4a0c      	ldr	r2, [pc, #48]	@ (800097c <LoopFillZerobss+0x16>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a09      	ldr	r2, [pc, #36]	@ (8000980 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800095c:	4c09      	ldr	r4, [pc, #36]	@ (8000984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096a:	f002 fe87 	bl	800367c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096e:	f7ff fe51 	bl	8000614 <main>
  bx lr
 8000972:	4770      	bx	lr
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800097c:	08003728 	.word	0x08003728
  ldr r2, =_sbss
 8000980:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000984:	20000134 	.word	0x20000134

08000988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_2_IRQHandler>
	...

0800098c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <HAL_Init+0x28>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	@ (80009b4 <HAL_Init+0x28>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f001 f987 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 f808 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a8:	f7ff fef0 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40022000 	.word	0x40022000

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_InitTick+0x54>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HAL_InitTick+0x58>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 f991 	bl	8001cfe <HAL_SYSTICK_Config>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00e      	b.n	8000a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d80a      	bhi.n	8000a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f001 f967 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f8:	4a06      	ldr	r2, [pc, #24]	@ (8000a14 <HAL_InitTick+0x5c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e000      	b.n	8000a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000004 	.word	0x20000004

08000a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <HAL_IncTick+0x1c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_IncTick+0x20>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a03      	ldr	r2, [pc, #12]	@ (8000a38 <HAL_IncTick+0x20>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000108 	.word	0x20000108

08000a3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b02      	ldr	r3, [pc, #8]	@ (8000a4c <HAL_GetTick+0x10>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	20000108 	.word	0x20000108

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff fff0 	bl	8000a3c <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffe0 	bl	8000a3c <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008

08000a98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e0ce      	b.n	8000c58 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d109      	bne.n	8000adc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fc80 	bl	80003dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 fbd7 	bl	8001290 <ADC_ConversionStop_Disable>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f040 80a9 	bne.w	8000c46 <HAL_ADC_Init+0x1ae>
 8000af4:	7dfb      	ldrb	r3, [r7, #23]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 80a5 	bne.w	8000c46 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b00:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b04:	f023 0302 	bic.w	r3, r3, #2
 8000b08:	f043 0202 	orr.w	r2, r3, #2
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4951      	ldr	r1, [pc, #324]	@ (8000c60 <HAL_ADC_Init+0x1c8>)
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d10a      	bne.n	8000b34 <HAL_ADC_Init+0x9c>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8000b26:	d002      	beq.n	8000b2e <HAL_ADC_Init+0x96>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	e004      	b.n	8000b38 <HAL_ADC_Init+0xa0>
 8000b2e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000b32:	e001      	b.n	8000b38 <HAL_ADC_Init+0xa0>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7b1b      	ldrb	r3, [r3, #12]
 8000b3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b50:	d003      	beq.n	8000b5a <HAL_ADC_Init+0xc2>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d102      	bne.n	8000b60 <HAL_ADC_Init+0xc8>
 8000b5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b5e:	e000      	b.n	8000b62 <HAL_ADC_Init+0xca>
 8000b60:	2300      	movs	r3, #0
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7d1b      	ldrb	r3, [r3, #20]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d119      	bne.n	8000ba4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7b1b      	ldrb	r3, [r3, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d109      	bne.n	8000b8c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	035a      	lsls	r2, r3, #13
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	e00b      	b.n	8000ba4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b90:	f043 0220 	orr.w	r2, r3, #32
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b9c:	f043 0201 	orr.w	r2, r3, #1
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <HAL_ADC_Init+0x1cc>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	6812      	ldr	r2, [r2, #0]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bd4:	d003      	beq.n	8000bde <HAL_ADC_Init+0x146>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d104      	bne.n	8000be8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	051b      	lsls	r3, r3, #20
 8000be6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <HAL_ADC_Init+0x1d0>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d10b      	bne.n	8000c24 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c16:	f023 0303 	bic.w	r3, r3, #3
 8000c1a:	f043 0201 	orr.w	r2, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c22:	e018      	b.n	8000c56 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c28:	f023 0312 	bic.w	r3, r3, #18
 8000c2c:	f043 0210 	orr.w	r2, r3, #16
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c38:	f043 0201 	orr.w	r2, r3, #1
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c44:	e007      	b.n	8000c56 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c4a:	f043 0210 	orr.w	r2, r3, #16
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40013c00 	.word	0x40013c00
 8000c64:	ffe1f7fd 	.word	0xffe1f7fd
 8000c68:	ff1f0efe 	.word	0xff1f0efe

08000c6c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d101      	bne.n	8000c86 <HAL_ADC_Start+0x1a>
 8000c82:	2302      	movs	r3, #2
 8000c84:	e098      	b.n	8000db8 <HAL_ADC_Start+0x14c>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f000 faa4 	bl	80011dc <ADC_Enable>
 8000c94:	4603      	mov	r3, r0
 8000c96:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f040 8087 	bne.w	8000dae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ca8:	f023 0301 	bic.w	r3, r3, #1
 8000cac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a41      	ldr	r2, [pc, #260]	@ (8000dc0 <HAL_ADC_Start+0x154>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d105      	bne.n	8000cca <HAL_ADC_Start+0x5e>
 8000cbe:	4b41      	ldr	r3, [pc, #260]	@ (8000dc4 <HAL_ADC_Start+0x158>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d115      	bne.n	8000cf6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d026      	beq.n	8000d32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000cec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cf4:	e01d      	b.n	8000d32 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a2f      	ldr	r2, [pc, #188]	@ (8000dc4 <HAL_ADC_Start+0x158>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d004      	beq.n	8000d16 <HAL_ADC_Start+0xaa>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a2b      	ldr	r2, [pc, #172]	@ (8000dc0 <HAL_ADC_Start+0x154>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d10d      	bne.n	8000d32 <HAL_ADC_Start+0xc6>
 8000d16:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc4 <HAL_ADC_Start+0x158>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d007      	beq.n	8000d32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d006      	beq.n	8000d4c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d42:	f023 0206 	bic.w	r2, r3, #6
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d4a:	e002      	b.n	8000d52 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f06f 0202 	mvn.w	r2, #2
 8000d62:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000d6e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d72:	d113      	bne.n	8000d9c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d78:	4a11      	ldr	r2, [pc, #68]	@ (8000dc0 <HAL_ADC_Start+0x154>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d105      	bne.n	8000d8a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_ADC_Start+0x158>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d108      	bne.n	8000d9c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	e00c      	b.n	8000db6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	e003      	b.n	8000db6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40012800 	.word	0x40012800
 8000dc4:	40012400 	.word	0x40012400

08000dc8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000dde:	f7ff fe2d 	bl	8000a3c <HAL_GetTick>
 8000de2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00b      	beq.n	8000e0a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df6:	f043 0220 	orr.w	r2, r3, #32
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e0d3      	b.n	8000fb2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d131      	bne.n	8000e7c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d12a      	bne.n	8000e7c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e26:	e021      	b.n	8000e6c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2e:	d01d      	beq.n	8000e6c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <HAL_ADC_PollForConversion+0x7e>
 8000e36:	f7ff fe01 	bl	8000a3c <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d212      	bcs.n	8000e6c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d10b      	bne.n	8000e6c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e58:	f043 0204 	orr.w	r2, r3, #4
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e0a2      	b.n	8000fb2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0d6      	beq.n	8000e28 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e7a:	e070      	b.n	8000f5e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8000fbc <HAL_ADC_PollForConversion+0x1f4>)
 8000e7e:	681c      	ldr	r4, [r3, #0]
 8000e80:	2002      	movs	r0, #2
 8000e82:	f001 ffa3 	bl	8002dcc <HAL_RCCEx_GetPeriphCLKFreq>
 8000e86:	4603      	mov	r3, r0
 8000e88:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6919      	ldr	r1, [r3, #16]
 8000e92:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc0 <HAL_ADC_PollForConversion+0x1f8>)
 8000e94:	400b      	ands	r3, r1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d118      	bne.n	8000ecc <HAL_ADC_PollForConversion+0x104>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68d9      	ldr	r1, [r3, #12]
 8000ea0:	4b48      	ldr	r3, [pc, #288]	@ (8000fc4 <HAL_ADC_PollForConversion+0x1fc>)
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d111      	bne.n	8000ecc <HAL_ADC_PollForConversion+0x104>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6919      	ldr	r1, [r3, #16]
 8000eae:	4b46      	ldr	r3, [pc, #280]	@ (8000fc8 <HAL_ADC_PollForConversion+0x200>)
 8000eb0:	400b      	ands	r3, r1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d108      	bne.n	8000ec8 <HAL_ADC_PollForConversion+0x100>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68d9      	ldr	r1, [r3, #12]
 8000ebc:	4b43      	ldr	r3, [pc, #268]	@ (8000fcc <HAL_ADC_PollForConversion+0x204>)
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <HAL_ADC_PollForConversion+0x100>
 8000ec4:	2314      	movs	r3, #20
 8000ec6:	e020      	b.n	8000f0a <HAL_ADC_PollForConversion+0x142>
 8000ec8:	2329      	movs	r3, #41	@ 0x29
 8000eca:	e01e      	b.n	8000f0a <HAL_ADC_PollForConversion+0x142>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6919      	ldr	r1, [r3, #16]
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc8 <HAL_ADC_PollForConversion+0x200>)
 8000ed4:	400b      	ands	r3, r1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d106      	bne.n	8000ee8 <HAL_ADC_PollForConversion+0x120>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68d9      	ldr	r1, [r3, #12]
 8000ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fcc <HAL_ADC_PollForConversion+0x204>)
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00d      	beq.n	8000f04 <HAL_ADC_PollForConversion+0x13c>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6919      	ldr	r1, [r3, #16]
 8000eee:	4b38      	ldr	r3, [pc, #224]	@ (8000fd0 <HAL_ADC_PollForConversion+0x208>)
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d108      	bne.n	8000f08 <HAL_ADC_PollForConversion+0x140>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68d9      	ldr	r1, [r3, #12]
 8000efc:	4b34      	ldr	r3, [pc, #208]	@ (8000fd0 <HAL_ADC_PollForConversion+0x208>)
 8000efe:	400b      	ands	r3, r1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_ADC_PollForConversion+0x140>
 8000f04:	2354      	movs	r3, #84	@ 0x54
 8000f06:	e000      	b.n	8000f0a <HAL_ADC_PollForConversion+0x142>
 8000f08:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f10:	e021      	b.n	8000f56 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d01a      	beq.n	8000f50 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <HAL_ADC_PollForConversion+0x168>
 8000f20:	f7ff fd8c 	bl	8000a3c <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d20f      	bcs.n	8000f50 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d90b      	bls.n	8000f50 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f3c:	f043 0204 	orr.w	r2, r3, #4
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e030      	b.n	8000fb2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d8d9      	bhi.n	8000f12 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f06f 0212 	mvn.w	r2, #18
 8000f66:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000f7e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f82:	d115      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d111      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa8:	f043 0201 	orr.w	r2, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	371c      	adds	r7, #28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	24924924 	.word	0x24924924
 8000fc4:	00924924 	.word	0x00924924
 8000fc8:	12492492 	.word	0x12492492
 8000fcc:	00492492 	.word	0x00492492
 8000fd0:	00249249 	.word	0x00249249

08000fd4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001004:	2b01      	cmp	r3, #1
 8001006:	d101      	bne.n	800100c <HAL_ADC_ConfigChannel+0x20>
 8001008:	2302      	movs	r3, #2
 800100a:	e0dc      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x1da>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b06      	cmp	r3, #6
 800101a:	d81c      	bhi.n	8001056 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	3b05      	subs	r3, #5
 800102e:	221f      	movs	r2, #31
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	4019      	ands	r1, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	3b05      	subs	r3, #5
 8001048:	fa00 f203 	lsl.w	r2, r0, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	635a      	str	r2, [r3, #52]	@ 0x34
 8001054:	e03c      	b.n	80010d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b0c      	cmp	r3, #12
 800105c:	d81c      	bhi.n	8001098 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	3b23      	subs	r3, #35	@ 0x23
 8001070:	221f      	movs	r2, #31
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	4019      	ands	r1, r3
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	3b23      	subs	r3, #35	@ 0x23
 800108a:	fa00 f203 	lsl.w	r2, r0, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	430a      	orrs	r2, r1
 8001094:	631a      	str	r2, [r3, #48]	@ 0x30
 8001096:	e01b      	b.n	80010d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	3b41      	subs	r3, #65	@ 0x41
 80010aa:	221f      	movs	r2, #31
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4019      	ands	r1, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	3b41      	subs	r3, #65	@ 0x41
 80010c4:	fa00 f203 	lsl.w	r2, r0, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b09      	cmp	r3, #9
 80010d6:	d91c      	bls.n	8001112 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68d9      	ldr	r1, [r3, #12]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	3b1e      	subs	r3, #30
 80010ea:	2207      	movs	r2, #7
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	4019      	ands	r1, r3
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	6898      	ldr	r0, [r3, #8]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	3b1e      	subs	r3, #30
 8001104:	fa00 f203 	lsl.w	r2, r0, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	e019      	b.n	8001146 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6919      	ldr	r1, [r3, #16]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	2207      	movs	r2, #7
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	4019      	ands	r1, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	6898      	ldr	r0, [r3, #8]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	fa00 f203 	lsl.w	r2, r0, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b10      	cmp	r3, #16
 800114c:	d003      	beq.n	8001156 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001152:	2b11      	cmp	r3, #17
 8001154:	d132      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a1d      	ldr	r2, [pc, #116]	@ (80011d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d125      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d126      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800117c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b10      	cmp	r3, #16
 8001184:	d11a      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001186:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a13      	ldr	r2, [pc, #76]	@ (80011d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800118c:	fba2 2303 	umull	r2, r3, r2, r3
 8001190:	0c9a      	lsrs	r2, r3, #18
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800119c:	e002      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f9      	bne.n	800119e <HAL_ADC_ConfigChannel+0x1b2>
 80011aa:	e007      	b.n	80011bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b0:	f043 0220 	orr.w	r2, r3, #32
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	40012400 	.word	0x40012400
 80011d4:	20000000 	.word	0x20000000
 80011d8:	431bde83 	.word	0x431bde83

080011dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d040      	beq.n	800127c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0201 	orr.w	r2, r2, #1
 8001208:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800120a:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <ADC_Enable+0xac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a1f      	ldr	r2, [pc, #124]	@ (800128c <ADC_Enable+0xb0>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	0c9b      	lsrs	r3, r3, #18
 8001216:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001218:	e002      	b.n	8001220 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	3b01      	subs	r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f9      	bne.n	800121a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001226:	f7ff fc09 	bl	8000a3c <HAL_GetTick>
 800122a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800122c:	e01f      	b.n	800126e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800122e:	f7ff fc05 	bl	8000a3c <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d918      	bls.n	800126e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b01      	cmp	r3, #1
 8001248:	d011      	beq.n	800126e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124e:	f043 0210 	orr.w	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125a:	f043 0201 	orr.w	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e007      	b.n	800127e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b01      	cmp	r3, #1
 800127a:	d1d8      	bne.n	800122e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000000 	.word	0x20000000
 800128c:	431bde83 	.word	0x431bde83

08001290 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d12e      	bne.n	8001308 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0201 	bic.w	r2, r2, #1
 80012b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ba:	f7ff fbbf 	bl	8000a3c <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012c0:	e01b      	b.n	80012fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012c2:	f7ff fbbb 	bl	8000a3c <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d914      	bls.n	80012fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d10d      	bne.n	80012fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e2:	f043 0210 	orr.w	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e007      	b.n	800130a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d0dc      	beq.n	80012c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0ed      	b.n	8001500 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff f8f5 	bl	8000520 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0201 	orr.w	r2, r2, #1
 8001344:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001346:	f7ff fb79 	bl	8000a3c <HAL_GetTick>
 800134a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800134c:	e012      	b.n	8001374 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800134e:	f7ff fb75 	bl	8000a3c <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b0a      	cmp	r3, #10
 800135a:	d90b      	bls.n	8001374 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001360:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2205      	movs	r2, #5
 800136c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e0c5      	b.n	8001500 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0e5      	beq.n	800134e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0202 	bic.w	r2, r2, #2
 8001390:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001392:	f7ff fb53 	bl	8000a3c <HAL_GetTick>
 8001396:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001398:	e012      	b.n	80013c0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800139a:	f7ff fb4f 	bl	8000a3c <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b0a      	cmp	r3, #10
 80013a6:	d90b      	bls.n	80013c0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2205      	movs	r2, #5
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e09f      	b.n	8001500 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1e5      	bne.n	800139a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7e1b      	ldrb	r3, [r3, #24]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d108      	bne.n	80013e8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e007      	b.n	80013f8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7e5b      	ldrb	r3, [r3, #25]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d108      	bne.n	8001412 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e007      	b.n	8001422 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7e9b      	ldrb	r3, [r3, #26]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d108      	bne.n	800143c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0220 	orr.w	r2, r2, #32
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e007      	b.n	800144c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0220 	bic.w	r2, r2, #32
 800144a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7edb      	ldrb	r3, [r3, #27]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d108      	bne.n	8001466 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0210 	bic.w	r2, r2, #16
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	e007      	b.n	8001476 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0210 	orr.w	r2, r2, #16
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7f1b      	ldrb	r3, [r3, #28]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0208 	orr.w	r2, r2, #8
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e007      	b.n	80014a0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0208 	bic.w	r2, r2, #8
 800149e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7f5b      	ldrb	r3, [r3, #29]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d108      	bne.n	80014ba <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0204 	orr.w	r2, r2, #4
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e007      	b.n	80014ca <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0204 	bic.w	r2, r2, #4
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	ea42 0103 	orr.w	r1, r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001520:	7cfb      	ldrb	r3, [r7, #19]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d003      	beq.n	800152e <HAL_CAN_ConfigFilter+0x26>
 8001526:	7cfb      	ldrb	r3, [r7, #19]
 8001528:	2b02      	cmp	r3, #2
 800152a:	f040 80aa 	bne.w	8001682 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	2201      	movs	r2, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	401a      	ands	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d123      	bne.n	80015b0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800158a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3248      	adds	r2, #72	@ 0x48
 8001590:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a6:	6979      	ldr	r1, [r7, #20]
 80015a8:	3348      	adds	r3, #72	@ 0x48
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d122      	bne.n	80015fe <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3248      	adds	r2, #72	@ 0x48
 80015de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015f4:	6979      	ldr	r1, [r7, #20]
 80015f6:	3348      	adds	r3, #72	@ 0x48
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43db      	mvns	r3, r3
 8001610:	401a      	ands	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001618:	e007      	b.n	800162a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	431a      	orrs	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43db      	mvns	r3, r3
 800163c:	401a      	ands	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001644:	e007      	b.n	8001656 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	431a      	orrs	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	431a      	orrs	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001674:	f023 0201 	bic.w	r2, r3, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e006      	b.n	8001690 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
  }
}
 8001690:	4618      	mov	r0, r3
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d12e      	bne.n	800170c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016c6:	f7ff f9b9 	bl	8000a3c <HAL_GetTick>
 80016ca:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016cc:	e012      	b.n	80016f4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016ce:	f7ff f9b5 	bl	8000a3c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b0a      	cmp	r3, #10
 80016da:	d90b      	bls.n	80016f4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2205      	movs	r2, #5
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e012      	b.n	800171a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1e5      	bne.n	80016ce <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	e006      	b.n	800171a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
  }
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001722:	b480      	push	{r7}
 8001724:	b089      	sub	sp, #36	@ 0x24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001736:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d003      	beq.n	800174e <HAL_CAN_AddTxMessage+0x2c>
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	2b02      	cmp	r3, #2
 800174a:	f040 80ad 	bne.w	80018a8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10a      	bne.n	800176e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8095 	beq.w	8001898 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	0e1b      	lsrs	r3, r3, #24
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001778:	2201      	movs	r2, #1
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	409a      	lsls	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10d      	bne.n	80017a6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	6809      	ldr	r1, [r1, #0]
 8001798:	431a      	orrs	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3318      	adds	r3, #24
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	440b      	add	r3, r1
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e00f      	b.n	80017c6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017b6:	68f9      	ldr	r1, [r7, #12]
 80017b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3318      	adds	r3, #24
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	440b      	add	r3, r1
 80017c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6819      	ldr	r1, [r3, #0]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	691a      	ldr	r2, [r3, #16]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3318      	adds	r3, #24
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	440b      	add	r3, r1
 80017d6:	3304      	adds	r3, #4
 80017d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	7d1b      	ldrb	r3, [r3, #20]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d111      	bne.n	8001806 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3318      	adds	r3, #24
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	3304      	adds	r3, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	6811      	ldr	r1, [r2, #0]
 80017f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3318      	adds	r3, #24
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	440b      	add	r3, r1
 8001802:	3304      	adds	r3, #4
 8001804:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3307      	adds	r3, #7
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	061a      	lsls	r2, r3, #24
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3306      	adds	r3, #6
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3305      	adds	r3, #5
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	4313      	orrs	r3, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	3204      	adds	r2, #4
 8001826:	7812      	ldrb	r2, [r2, #0]
 8001828:	4610      	mov	r0, r2
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	6811      	ldr	r1, [r2, #0]
 800182e:	ea43 0200 	orr.w	r2, r3, r0
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	440b      	add	r3, r1
 8001838:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800183c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3303      	adds	r3, #3
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	061a      	lsls	r2, r3, #24
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3302      	adds	r3, #2
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3301      	adds	r3, #1
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	4313      	orrs	r3, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	4610      	mov	r0, r2
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	6811      	ldr	r1, [r2, #0]
 8001864:	ea43 0200 	orr.w	r2, r3, r0
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	440b      	add	r3, r1
 800186e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001872:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3318      	adds	r3, #24
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	4413      	add	r3, r2
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	6811      	ldr	r1, [r2, #0]
 8001886:	f043 0201 	orr.w	r2, r3, #1
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3318      	adds	r3, #24
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	440b      	add	r3, r1
 8001892:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e00e      	b.n	80018b6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e006      	b.n	80018b6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
  }
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d003      	beq.n	80018e4 <HAL_CAN_GetRxMessage+0x24>
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	f040 8103 	bne.w	8001aea <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10e      	bne.n	8001908 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d116      	bne.n	8001926 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0f7      	b.n	8001af8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0e8      	b.n	8001af8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	331b      	adds	r3, #27
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4413      	add	r3, r2
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0204 	and.w	r2, r3, #4
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10c      	bne.n	800195e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	331b      	adds	r3, #27
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0d5b      	lsrs	r3, r3, #21
 8001954:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e00b      	b.n	8001976 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	331b      	adds	r3, #27
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	08db      	lsrs	r3, r3, #3
 800196e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	331b      	adds	r3, #27
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	4413      	add	r3, r2
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0202 	and.w	r2, r3, #2
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	331b      	adds	r3, #27
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	3304      	adds	r3, #4
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2208      	movs	r2, #8
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	e00b      	b.n	80019c4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	331b      	adds	r3, #27
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4413      	add	r3, r2
 80019b8:	3304      	adds	r3, #4
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 020f 	and.w	r2, r3, #15
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	331b      	adds	r3, #27
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	3304      	adds	r3, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	331b      	adds	r3, #27
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	4413      	add	r3, r2
 80019e8:	3304      	adds	r3, #4
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0a1a      	lsrs	r2, r3, #8
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0c1a      	lsrs	r2, r3, #16
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	3302      	adds	r3, #2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	0e1a      	lsrs	r2, r3, #24
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	3303      	adds	r3, #3
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0a1a      	lsrs	r2, r3, #8
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	3305      	adds	r3, #5
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0c1a      	lsrs	r2, r3, #16
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	3306      	adds	r3, #6
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0e1a      	lsrs	r2, r3, #24
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	3307      	adds	r3, #7
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d108      	bne.n	8001ad6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	e007      	b.n	8001ae6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e006      	b.n	8001af8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
  }
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b16:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d002      	beq.n	8001b24 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001b1e:	7afb      	ldrb	r3, [r7, #11]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d10f      	bne.n	8001b44 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e005      	b.n	8001b44 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	@ (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	@ (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	@ 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	@ 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff90 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff49 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff5e 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff90 	bl	8001c08 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5f 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffb0 	bl	8001c6c <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d32:	4b2f      	ldr	r3, [pc, #188]	@ (8001df0 <HAL_FLASH_Program+0xd8>)
 8001d34:	7e1b      	ldrb	r3, [r3, #24]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_FLASH_Program+0x26>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e054      	b.n	8001de8 <HAL_FLASH_Program+0xd0>
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001df0 <HAL_FLASH_Program+0xd8>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d44:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001d48:	f000 f8a8 	bl	8001e9c <FLASH_WaitForLastOperation>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d144      	bne.n	8001de0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d102      	bne.n	8001d62 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	757b      	strb	r3, [r7, #21]
 8001d60:	e007      	b.n	8001d72 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d102      	bne.n	8001d6e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	757b      	strb	r3, [r7, #21]
 8001d6c:	e001      	b.n	8001d72 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001d6e:	2304      	movs	r3, #4
 8001d70:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	75bb      	strb	r3, [r7, #22]
 8001d76:	e02d      	b.n	8001dd4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001d78:	7dbb      	ldrb	r3, [r7, #22]
 8001d7a:	005a      	lsls	r2, r3, #1
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	eb02 0c03 	add.w	ip, r2, r3
 8001d82:	7dbb      	ldrb	r3, [r7, #22]
 8001d84:	0119      	lsls	r1, r3, #4
 8001d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d8a:	f1c1 0620 	rsb	r6, r1, #32
 8001d8e:	f1a1 0020 	sub.w	r0, r1, #32
 8001d92:	fa22 f401 	lsr.w	r4, r2, r1
 8001d96:	fa03 f606 	lsl.w	r6, r3, r6
 8001d9a:	4334      	orrs	r4, r6
 8001d9c:	fa23 f000 	lsr.w	r0, r3, r0
 8001da0:	4304      	orrs	r4, r0
 8001da2:	fa23 f501 	lsr.w	r5, r3, r1
 8001da6:	b2a3      	uxth	r3, r4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4660      	mov	r0, ip
 8001dac:	f000 f85a 	bl	8001e64 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001db0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001db4:	f000 f872 	bl	8001e9c <FLASH_WaitForLastOperation>
 8001db8:	4603      	mov	r3, r0
 8001dba:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <HAL_FLASH_Program+0xdc>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001df4 <HAL_FLASH_Program+0xdc>)
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d107      	bne.n	8001dde <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001dce:	7dbb      	ldrb	r3, [r7, #22]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	75bb      	strb	r3, [r7, #22]
 8001dd4:	7dba      	ldrb	r2, [r7, #22]
 8001dd6:	7d7b      	ldrb	r3, [r7, #21]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d3cd      	bcc.n	8001d78 <HAL_FLASH_Program+0x60>
 8001ddc:	e000      	b.n	8001de0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001dde:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001de0:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <HAL_FLASH_Program+0xd8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	761a      	strb	r2, [r3, #24]

  return status;
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df0:	20000110 	.word	0x20000110
 8001df4:	40022000 	.word	0x40022000

08001df8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e02:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <HAL_FLASH_Unlock+0x40>)
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00d      	beq.n	8001e2a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <HAL_FLASH_Unlock+0x40>)
 8001e10:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <HAL_FLASH_Unlock+0x44>)
 8001e12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <HAL_FLASH_Unlock+0x40>)
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <HAL_FLASH_Unlock+0x48>)
 8001e18:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <HAL_FLASH_Unlock+0x40>)
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	45670123 	.word	0x45670123
 8001e40:	cdef89ab 	.word	0xcdef89ab

08001e44 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <HAL_FLASH_Lock+0x1c>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <HAL_FLASH_Lock+0x1c>)
 8001e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e52:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40022000 	.word	0x40022000

08001e64 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <FLASH_Program_HalfWord+0x30>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001e76:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <FLASH_Program_HalfWord+0x34>)
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	4a07      	ldr	r2, [pc, #28]	@ (8001e98 <FLASH_Program_HalfWord+0x34>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	887a      	ldrh	r2, [r7, #2]
 8001e86:	801a      	strh	r2, [r3, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000110 	.word	0x20000110
 8001e98:	40022000 	.word	0x40022000

08001e9c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7fe fdca 	bl	8000a3c <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001eaa:	e010      	b.n	8001ece <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb2:	d00c      	beq.n	8001ece <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <FLASH_WaitForLastOperation+0x2e>
 8001eba:	f7fe fdbf 	bl	8000a3c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d201      	bcs.n	8001ece <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e025      	b.n	8001f1a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <FLASH_WaitForLastOperation+0x88>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e8      	bne.n	8001eac <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001eda:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <FLASH_WaitForLastOperation+0x88>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <FLASH_WaitForLastOperation+0x88>)
 8001ee8:	2220      	movs	r2, #32
 8001eea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001eec:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <FLASH_WaitForLastOperation+0x88>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10b      	bne.n	8001f10 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <FLASH_WaitForLastOperation+0x88>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d105      	bne.n	8001f10 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001f04:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <FLASH_WaitForLastOperation+0x88>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001f10:	f000 f80a 	bl	8001f28 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000

08001f28 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001f32:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <FLASH_SetErrorCode+0x98>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f3e:	4b21      	ldr	r3, [pc, #132]	@ (8001fc4 <FLASH_SetErrorCode+0x9c>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc4 <FLASH_SetErrorCode+0x9c>)
 8001f48:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f043 0310 	orr.w	r3, r3, #16
 8001f50:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001f52:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <FLASH_SetErrorCode+0x98>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001f5e:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <FLASH_SetErrorCode+0x9c>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	4a17      	ldr	r2, [pc, #92]	@ (8001fc4 <FLASH_SetErrorCode+0x9c>)
 8001f68:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001f72:	4b13      	ldr	r3, [pc, #76]	@ (8001fc0 <FLASH_SetErrorCode+0x98>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <FLASH_SetErrorCode+0x9c>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc4 <FLASH_SetErrorCode+0x9c>)
 8001f88:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <FLASH_SetErrorCode+0x98>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc0 <FLASH_SetErrorCode+0x98>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f240 1201 	movw	r2, #257	@ 0x101
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d106      	bne.n	8001fae <FLASH_SetErrorCode+0x86>
 8001fa0:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <FLASH_SetErrorCode+0x98>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	4a06      	ldr	r2, [pc, #24]	@ (8001fc0 <FLASH_SetErrorCode+0x98>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	61d3      	str	r3, [r2, #28]
}  
 8001fac:	e002      	b.n	8001fb4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001fae:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <FLASH_SetErrorCode+0x98>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	60d3      	str	r3, [r2, #12]
}  
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	20000110 	.word	0x20000110

08001fc8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001fda:	4b2f      	ldr	r3, [pc, #188]	@ (8002098 <HAL_FLASHEx_Erase+0xd0>)
 8001fdc:	7e1b      	ldrb	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_FLASHEx_Erase+0x1e>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e053      	b.n	800208e <HAL_FLASHEx_Erase+0xc6>
 8001fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8002098 <HAL_FLASHEx_Erase+0xd0>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d116      	bne.n	8002022 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001ff4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ff8:	f7ff ff50 	bl	8001e9c <FLASH_WaitForLastOperation>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d141      	bne.n	8002086 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002002:	2001      	movs	r0, #1
 8002004:	f000 f84c 	bl	80020a0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002008:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800200c:	f7ff ff46 	bl	8001e9c <FLASH_WaitForLastOperation>
 8002010:	4603      	mov	r3, r0
 8002012:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002014:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_FLASHEx_Erase+0xd4>)
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	4a20      	ldr	r2, [pc, #128]	@ (800209c <HAL_FLASHEx_Erase+0xd4>)
 800201a:	f023 0304 	bic.w	r3, r3, #4
 800201e:	6113      	str	r3, [r2, #16]
 8002020:	e031      	b.n	8002086 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002022:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002026:	f7ff ff39 	bl	8001e9c <FLASH_WaitForLastOperation>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d12a      	bne.n	8002086 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f04f 32ff 	mov.w	r2, #4294967295
 8002036:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	e019      	b.n	8002074 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002040:	68b8      	ldr	r0, [r7, #8]
 8002042:	f000 f849 	bl	80020d8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002046:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800204a:	f7ff ff27 	bl	8001e9c <FLASH_WaitForLastOperation>
 800204e:	4603      	mov	r3, r0
 8002050:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002052:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_FLASHEx_Erase+0xd4>)
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	4a11      	ldr	r2, [pc, #68]	@ (800209c <HAL_FLASHEx_Erase+0xd4>)
 8002058:	f023 0302 	bic.w	r3, r3, #2
 800205c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	601a      	str	r2, [r3, #0]
            break;
 800206a:	e00c      	b.n	8002086 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002072:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	02da      	lsls	r2, r3, #11
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	4413      	add	r3, r2
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	429a      	cmp	r2, r3
 8002084:	d3dc      	bcc.n	8002040 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002086:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <HAL_FLASHEx_Erase+0xd0>)
 8002088:	2200      	movs	r2, #0
 800208a:	761a      	strb	r2, [r3, #24]

  return status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000110 	.word	0x20000110
 800209c:	40022000 	.word	0x40022000

080020a0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020a8:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <FLASH_MassErase+0x30>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <FLASH_MassErase+0x34>)
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	4a08      	ldr	r2, [pc, #32]	@ (80020d4 <FLASH_MassErase+0x34>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <FLASH_MassErase+0x34>)
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	4a05      	ldr	r2, [pc, #20]	@ (80020d4 <FLASH_MassErase+0x34>)
 80020c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020c4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	20000110 	.word	0x20000110
 80020d4:	40022000 	.word	0x40022000

080020d8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <FLASH_PageErase+0x38>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80020e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <FLASH_PageErase+0x3c>)
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <FLASH_PageErase+0x3c>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80020f2:	4a08      	ldr	r2, [pc, #32]	@ (8002114 <FLASH_PageErase+0x3c>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <FLASH_PageErase+0x3c>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <FLASH_PageErase+0x3c>)
 80020fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002102:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000110 	.word	0x20000110
 8002114:	40022000 	.word	0x40022000

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b08b      	sub	sp, #44	@ 0x2c
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212a:	e179      	b.n	8002420 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800212c:	2201      	movs	r2, #1
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	429a      	cmp	r2, r3
 8002146:	f040 8168 	bne.w	800241a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4a96      	ldr	r2, [pc, #600]	@ (80023a8 <HAL_GPIO_Init+0x290>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d05e      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002154:	4a94      	ldr	r2, [pc, #592]	@ (80023a8 <HAL_GPIO_Init+0x290>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d875      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 800215a:	4a94      	ldr	r2, [pc, #592]	@ (80023ac <HAL_GPIO_Init+0x294>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d058      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002160:	4a92      	ldr	r2, [pc, #584]	@ (80023ac <HAL_GPIO_Init+0x294>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d86f      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 8002166:	4a92      	ldr	r2, [pc, #584]	@ (80023b0 <HAL_GPIO_Init+0x298>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d052      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 800216c:	4a90      	ldr	r2, [pc, #576]	@ (80023b0 <HAL_GPIO_Init+0x298>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d869      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 8002172:	4a90      	ldr	r2, [pc, #576]	@ (80023b4 <HAL_GPIO_Init+0x29c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d04c      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002178:	4a8e      	ldr	r2, [pc, #568]	@ (80023b4 <HAL_GPIO_Init+0x29c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d863      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 800217e:	4a8e      	ldr	r2, [pc, #568]	@ (80023b8 <HAL_GPIO_Init+0x2a0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d046      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002184:	4a8c      	ldr	r2, [pc, #560]	@ (80023b8 <HAL_GPIO_Init+0x2a0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d85d      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 800218a:	2b12      	cmp	r3, #18
 800218c:	d82a      	bhi.n	80021e4 <HAL_GPIO_Init+0xcc>
 800218e:	2b12      	cmp	r3, #18
 8002190:	d859      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 8002192:	a201      	add	r2, pc, #4	@ (adr r2, 8002198 <HAL_GPIO_Init+0x80>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	08002213 	.word	0x08002213
 800219c:	080021ed 	.word	0x080021ed
 80021a0:	080021ff 	.word	0x080021ff
 80021a4:	08002241 	.word	0x08002241
 80021a8:	08002247 	.word	0x08002247
 80021ac:	08002247 	.word	0x08002247
 80021b0:	08002247 	.word	0x08002247
 80021b4:	08002247 	.word	0x08002247
 80021b8:	08002247 	.word	0x08002247
 80021bc:	08002247 	.word	0x08002247
 80021c0:	08002247 	.word	0x08002247
 80021c4:	08002247 	.word	0x08002247
 80021c8:	08002247 	.word	0x08002247
 80021cc:	08002247 	.word	0x08002247
 80021d0:	08002247 	.word	0x08002247
 80021d4:	08002247 	.word	0x08002247
 80021d8:	08002247 	.word	0x08002247
 80021dc:	080021f5 	.word	0x080021f5
 80021e0:	08002209 	.word	0x08002209
 80021e4:	4a75      	ldr	r2, [pc, #468]	@ (80023bc <HAL_GPIO_Init+0x2a4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ea:	e02c      	b.n	8002246 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	623b      	str	r3, [r7, #32]
          break;
 80021f2:	e029      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	3304      	adds	r3, #4
 80021fa:	623b      	str	r3, [r7, #32]
          break;
 80021fc:	e024      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	3308      	adds	r3, #8
 8002204:	623b      	str	r3, [r7, #32]
          break;
 8002206:	e01f      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	330c      	adds	r3, #12
 800220e:	623b      	str	r3, [r7, #32]
          break;
 8002210:	e01a      	b.n	8002248 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800221a:	2304      	movs	r3, #4
 800221c:	623b      	str	r3, [r7, #32]
          break;
 800221e:	e013      	b.n	8002248 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002228:	2308      	movs	r3, #8
 800222a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	611a      	str	r2, [r3, #16]
          break;
 8002232:	e009      	b.n	8002248 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002234:	2308      	movs	r3, #8
 8002236:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	615a      	str	r2, [r3, #20]
          break;
 800223e:	e003      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
          break;
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x130>
          break;
 8002246:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2bff      	cmp	r3, #255	@ 0xff
 800224c:	d801      	bhi.n	8002252 <HAL_GPIO_Init+0x13a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	e001      	b.n	8002256 <HAL_GPIO_Init+0x13e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2bff      	cmp	r3, #255	@ 0xff
 800225c:	d802      	bhi.n	8002264 <HAL_GPIO_Init+0x14c>
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	e002      	b.n	800226a <HAL_GPIO_Init+0x152>
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	3b08      	subs	r3, #8
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	210f      	movs	r1, #15
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	6a39      	ldr	r1, [r7, #32]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	431a      	orrs	r2, r3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80c1 	beq.w	800241a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002298:	4b49      	ldr	r3, [pc, #292]	@ (80023c0 <HAL_GPIO_Init+0x2a8>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a48      	ldr	r2, [pc, #288]	@ (80023c0 <HAL_GPIO_Init+0x2a8>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b46      	ldr	r3, [pc, #280]	@ (80023c0 <HAL_GPIO_Init+0x2a8>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022b0:	4a44      	ldr	r2, [pc, #272]	@ (80023c4 <HAL_GPIO_Init+0x2ac>)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3c      	ldr	r2, [pc, #240]	@ (80023c8 <HAL_GPIO_Init+0x2b0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d01f      	beq.n	800231c <HAL_GPIO_Init+0x204>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3b      	ldr	r2, [pc, #236]	@ (80023cc <HAL_GPIO_Init+0x2b4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d019      	beq.n	8002318 <HAL_GPIO_Init+0x200>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a3a      	ldr	r2, [pc, #232]	@ (80023d0 <HAL_GPIO_Init+0x2b8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_GPIO_Init+0x1fc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a39      	ldr	r2, [pc, #228]	@ (80023d4 <HAL_GPIO_Init+0x2bc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00d      	beq.n	8002310 <HAL_GPIO_Init+0x1f8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a38      	ldr	r2, [pc, #224]	@ (80023d8 <HAL_GPIO_Init+0x2c0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_Init+0x1f4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a37      	ldr	r2, [pc, #220]	@ (80023dc <HAL_GPIO_Init+0x2c4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_GPIO_Init+0x1f0>
 8002304:	2305      	movs	r3, #5
 8002306:	e00a      	b.n	800231e <HAL_GPIO_Init+0x206>
 8002308:	2306      	movs	r3, #6
 800230a:	e008      	b.n	800231e <HAL_GPIO_Init+0x206>
 800230c:	2304      	movs	r3, #4
 800230e:	e006      	b.n	800231e <HAL_GPIO_Init+0x206>
 8002310:	2303      	movs	r3, #3
 8002312:	e004      	b.n	800231e <HAL_GPIO_Init+0x206>
 8002314:	2302      	movs	r3, #2
 8002316:	e002      	b.n	800231e <HAL_GPIO_Init+0x206>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_GPIO_Init+0x206>
 800231c:	2300      	movs	r3, #0
 800231e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002320:	f002 0203 	and.w	r2, r2, #3
 8002324:	0092      	lsls	r2, r2, #2
 8002326:	4093      	lsls	r3, r2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800232e:	4925      	ldr	r1, [pc, #148]	@ (80023c4 <HAL_GPIO_Init+0x2ac>)
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002348:	4b25      	ldr	r3, [pc, #148]	@ (80023e0 <HAL_GPIO_Init+0x2c8>)
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	4924      	ldr	r1, [pc, #144]	@ (80023e0 <HAL_GPIO_Init+0x2c8>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002356:	4b22      	ldr	r3, [pc, #136]	@ (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	43db      	mvns	r3, r3
 800235e:	4920      	ldr	r1, [pc, #128]	@ (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002360:	4013      	ands	r3, r2
 8002362:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	491a      	ldr	r1, [pc, #104]	@ (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	60cb      	str	r3, [r1, #12]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800237e:	4b18      	ldr	r3, [pc, #96]	@ (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	4916      	ldr	r1, [pc, #88]	@ (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002388:	4013      	ands	r3, r2
 800238a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d025      	beq.n	80023e4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_GPIO_Init+0x2c8>)
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4910      	ldr	r1, [pc, #64]	@ (80023e0 <HAL_GPIO_Init+0x2c8>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
 80023a4:	e025      	b.n	80023f2 <HAL_GPIO_Init+0x2da>
 80023a6:	bf00      	nop
 80023a8:	10320000 	.word	0x10320000
 80023ac:	10310000 	.word	0x10310000
 80023b0:	10220000 	.word	0x10220000
 80023b4:	10210000 	.word	0x10210000
 80023b8:	10120000 	.word	0x10120000
 80023bc:	10110000 	.word	0x10110000
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40010800 	.word	0x40010800
 80023cc:	40010c00 	.word	0x40010c00
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40011400 	.word	0x40011400
 80023d8:	40011800 	.word	0x40011800
 80023dc:	40011c00 	.word	0x40011c00
 80023e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023e4:	4b15      	ldr	r3, [pc, #84]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4913      	ldr	r1, [pc, #76]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023fe:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <HAL_GPIO_Init+0x324>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	490e      	ldr	r1, [pc, #56]	@ (800243c <HAL_GPIO_Init+0x324>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
 800240a:	e006      	b.n	800241a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_GPIO_Init+0x324>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	43db      	mvns	r3, r3
 8002414:	4909      	ldr	r1, [pc, #36]	@ (800243c <HAL_GPIO_Init+0x324>)
 8002416:	4013      	ands	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	3301      	adds	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	f47f ae7e 	bne.w	800212c <HAL_GPIO_Init+0x14>
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	372c      	adds	r7, #44	@ 0x2c
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	40010400 	.word	0x40010400

08002440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e272      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8087 	beq.w	800256e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002460:	4b92      	ldr	r3, [pc, #584]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b04      	cmp	r3, #4
 800246a:	d00c      	beq.n	8002486 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800246c:	4b8f      	ldr	r3, [pc, #572]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b08      	cmp	r3, #8
 8002476:	d112      	bne.n	800249e <HAL_RCC_OscConfig+0x5e>
 8002478:	4b8c      	ldr	r3, [pc, #560]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002484:	d10b      	bne.n	800249e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002486:	4b89      	ldr	r3, [pc, #548]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d06c      	beq.n	800256c <HAL_RCC_OscConfig+0x12c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d168      	bne.n	800256c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e24c      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x76>
 80024a8:	4b80      	ldr	r3, [pc, #512]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a7f      	ldr	r2, [pc, #508]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e02e      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x98>
 80024be:	4b7b      	ldr	r3, [pc, #492]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7a      	ldr	r2, [pc, #488]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b78      	ldr	r3, [pc, #480]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a77      	ldr	r2, [pc, #476]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e01d      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0xbc>
 80024e2:	4b72      	ldr	r3, [pc, #456]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a71      	ldr	r2, [pc, #452]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b6f      	ldr	r3, [pc, #444]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6e      	ldr	r2, [pc, #440]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024fc:	4b6b      	ldr	r3, [pc, #428]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6a      	ldr	r2, [pc, #424]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b68      	ldr	r3, [pc, #416]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a67      	ldr	r2, [pc, #412]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002512:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fa8e 	bl	8000a3c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7fe fa8a 	bl	8000a3c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e200      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b5d      	ldr	r3, [pc, #372]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0xe4>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe fa7a 	bl	8000a3c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7fe fa76 	bl	8000a3c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	@ 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1ec      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x10c>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d063      	beq.n	8002642 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800257a:	4b4c      	ldr	r3, [pc, #304]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002586:	4b49      	ldr	r3, [pc, #292]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11c      	bne.n	80025cc <HAL_RCC_OscConfig+0x18c>
 8002592:	4b46      	ldr	r3, [pc, #280]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d116      	bne.n	80025cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	4b43      	ldr	r3, [pc, #268]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x176>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1c0      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4939      	ldr	r1, [pc, #228]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	e03a      	b.n	8002642 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d4:	4b36      	ldr	r3, [pc, #216]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7fe fa2f 	bl	8000a3c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7fe fa2b 	bl	8000a3c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1a1      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	4b2d      	ldr	r3, [pc, #180]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b2a      	ldr	r3, [pc, #168]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4927      	ldr	r1, [pc, #156]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e015      	b.n	8002642 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002616:	4b26      	ldr	r3, [pc, #152]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe fa0e 	bl	8000a3c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002624:	f7fe fa0a 	bl	8000a3c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e180      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d03a      	beq.n	80026c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d019      	beq.n	800268a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002656:	4b17      	ldr	r3, [pc, #92]	@ (80026b4 <HAL_RCC_OscConfig+0x274>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265c:	f7fe f9ee 	bl	8000a3c <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7fe f9ea 	bl	8000a3c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e160      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002682:	2001      	movs	r0, #1
 8002684:	f000 face 	bl	8002c24 <RCC_Delay>
 8002688:	e01c      	b.n	80026c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268a:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HAL_RCC_OscConfig+0x274>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7fe f9d4 	bl	8000a3c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002696:	e00f      	b.n	80026b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7fe f9d0 	bl	8000a3c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d908      	bls.n	80026b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e146      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	42420000 	.word	0x42420000
 80026b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	4b92      	ldr	r3, [pc, #584]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1e9      	bne.n	8002698 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80a6 	beq.w	800281e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b88      	ldr	r3, [pc, #544]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a87      	ldr	r2, [pc, #540]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]
 80026ee:	4b85      	ldr	r3, [pc, #532]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270a:	4b7f      	ldr	r3, [pc, #508]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7e      	ldr	r2, [pc, #504]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7fe f991 	bl	8000a3c <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe f98d 	bl	8000a3c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	@ 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e103      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b75      	ldr	r3, [pc, #468]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x312>
 8002744:	4b6f      	ldr	r3, [pc, #444]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a6e      	ldr	r2, [pc, #440]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	e02d      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x334>
 800275a:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a69      	ldr	r2, [pc, #420]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6213      	str	r3, [r2, #32]
 8002766:	4b67      	ldr	r3, [pc, #412]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a66      	ldr	r2, [pc, #408]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	e01c      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d10c      	bne.n	8002796 <HAL_RCC_OscConfig+0x356>
 800277c:	4b61      	ldr	r3, [pc, #388]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a60      	ldr	r2, [pc, #384]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	4b5e      	ldr	r3, [pc, #376]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a5d      	ldr	r2, [pc, #372]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	e00b      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002796:	4b5b      	ldr	r3, [pc, #364]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a5a      	ldr	r2, [pc, #360]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	4b58      	ldr	r3, [pc, #352]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a57      	ldr	r2, [pc, #348]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d015      	beq.n	80027e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7fe f941 	bl	8000a3c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe f93d 	bl	8000a3c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0b1      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ee      	beq.n	80027be <HAL_RCC_OscConfig+0x37e>
 80027e0:	e014      	b.n	800280c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7fe f92b 	bl	8000a3c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe f927 	bl	8000a3c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e09b      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	4b40      	ldr	r3, [pc, #256]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ee      	bne.n	80027ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b3c      	ldr	r3, [pc, #240]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4a3b      	ldr	r2, [pc, #236]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8087 	beq.w	8002936 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002828:	4b36      	ldr	r3, [pc, #216]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d061      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d146      	bne.n	80028ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b33      	ldr	r3, [pc, #204]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7fe f8fb 	bl	8000a3c <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe f8f7 	bl	8000a3c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e06d      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	4b29      	ldr	r3, [pc, #164]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002870:	d108      	bne.n	8002884 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002872:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4921      	ldr	r1, [pc, #132]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002884:	4b1f      	ldr	r3, [pc, #124]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a19      	ldr	r1, [r3, #32]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	430b      	orrs	r3, r1
 8002896:	491b      	ldr	r1, [pc, #108]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe f8cb 	bl	8000a3c <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe f8c7 	bl	8000a3c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e03d      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x46a>
 80028c8:	e035      	b.n	8002936 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7fe f8b4 	bl	8000a3c <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fe f8b0 	bl	8000a3c <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e026      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x498>
 80028f6:	e01e      	b.n	8002936 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e019      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_OscConfig+0x500>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	429a      	cmp	r2, r3
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000

08002944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0d0      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b6a      	ldr	r3, [pc, #424]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d910      	bls.n	8002988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b67      	ldr	r3, [pc, #412]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0207 	bic.w	r2, r3, #7
 800296e:	4965      	ldr	r1, [pc, #404]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b63      	ldr	r3, [pc, #396]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0b8      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a0:	4b59      	ldr	r3, [pc, #356]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a58      	ldr	r2, [pc, #352]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b8:	4b53      	ldr	r3, [pc, #332]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a52      	ldr	r2, [pc, #328]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c4:	4b50      	ldr	r3, [pc, #320]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	494d      	ldr	r1, [pc, #308]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d040      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	4b47      	ldr	r3, [pc, #284]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d115      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e07f      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e073      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e06b      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4936      	ldr	r1, [pc, #216]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7fe f802 	bl	8000a3c <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fd fffe 	bl	8000a3c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e053      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d210      	bcs.n	8002a94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4922      	ldr	r1, [pc, #136]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e032      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4916      	ldr	r1, [pc, #88]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002abe:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	490e      	ldr	r1, [pc, #56]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ad2:	f000 f821 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	490a      	ldr	r1, [pc, #40]	@ (8002b0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	5ccb      	ldrb	r3, [r1, r3]
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	4a09      	ldr	r2, [pc, #36]	@ (8002b10 <HAL_RCC_ClockConfig+0x1cc>)
 8002aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aee:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_RCC_ClockConfig+0x1d0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd ff60 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40022000 	.word	0x40022000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	080036e0 	.word	0x080036e0
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000004 	.word	0x20000004

08002b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b32:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x94>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d002      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x30>
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x36>
 8002b46:	e027      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4a:	613b      	str	r3, [r7, #16]
      break;
 8002b4c:	e027      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	0c9b      	lsrs	r3, r3, #18
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	4a17      	ldr	r2, [pc, #92]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b66:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x94>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0c5b      	lsrs	r3, r3, #17
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	4a11      	ldr	r2, [pc, #68]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b7a:	fb03 f202 	mul.w	r2, r3, r2
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e004      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	613b      	str	r3, [r7, #16]
      break;
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b9a:	613b      	str	r3, [r7, #16]
      break;
 8002b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9e:	693b      	ldr	r3, [r7, #16]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	007a1200 	.word	0x007a1200
 8002bb4:	080036f8 	.word	0x080036f8
 8002bb8:	08003708 	.word	0x08003708
 8002bbc:	003d0900 	.word	0x003d0900

08002bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc4:	4b02      	ldr	r3, [pc, #8]	@ (8002bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	20000000 	.word	0x20000000

08002bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd8:	f7ff fff2 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4903      	ldr	r1, [pc, #12]	@ (8002bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	080036f0 	.word	0x080036f0

08002bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c00:	f7ff ffde 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0adb      	lsrs	r3, r3, #11
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4903      	ldr	r1, [pc, #12]	@ (8002c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	080036f0 	.word	0x080036f0

08002c24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <RCC_Delay+0x34>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	@ (8002c5c <RCC_Delay+0x38>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c40:	bf00      	nop
  }
  while (Delay --);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	60fa      	str	r2, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f9      	bne.n	8002c40 <RCC_Delay+0x1c>
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	10624dd3 	.word	0x10624dd3

08002c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d07d      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c80:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8c:	4b4c      	ldr	r3, [pc, #304]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	61d3      	str	r3, [r2, #28]
 8002c98:	4b49      	ldr	r3, [pc, #292]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4b46      	ldr	r3, [pc, #280]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d118      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb4:	4b43      	ldr	r3, [pc, #268]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a42      	ldr	r2, [pc, #264]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc0:	f7fd febc 	bl	8000a3c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	e008      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc8:	f7fd feb8 	bl	8000a3c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e06d      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ce6:	4b36      	ldr	r3, [pc, #216]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d02e      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d027      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d04:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d14:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d1a:	4a29      	ldr	r2, [pc, #164]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d014      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fd fe87 	bl	8000a3c <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fd fe83 	bl	8000a3c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e036      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ee      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d54:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4917      	ldr	r1, [pc, #92]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b14      	ldr	r3, [pc, #80]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	4a13      	ldr	r2, [pc, #76]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d84:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	490b      	ldr	r1, [pc, #44]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da2:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	4904      	ldr	r1, [pc, #16]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	42420440 	.word	0x42420440

08002dcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	2b0f      	cmp	r3, #15
 8002dee:	f200 80af 	bhi.w	8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8002df2:	a201      	add	r2, pc, #4	@ (adr r2, 8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002ecf 	.word	0x08002ecf
 8002dfc:	08002f35 	.word	0x08002f35
 8002e00:	08002f51 	.word	0x08002f51
 8002e04:	08002ebf 	.word	0x08002ebf
 8002e08:	08002f51 	.word	0x08002f51
 8002e0c:	08002f51 	.word	0x08002f51
 8002e10:	08002f51 	.word	0x08002f51
 8002e14:	08002ec7 	.word	0x08002ec7
 8002e18:	08002f51 	.word	0x08002f51
 8002e1c:	08002f51 	.word	0x08002f51
 8002e20:	08002f51 	.word	0x08002f51
 8002e24:	08002f51 	.word	0x08002f51
 8002e28:	08002f51 	.word	0x08002f51
 8002e2c:	08002f51 	.word	0x08002f51
 8002e30:	08002f51 	.word	0x08002f51
 8002e34:	08002e39 	.word	0x08002e39
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002e38:	4b4a      	ldr	r3, [pc, #296]	@ (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e3e:	4b49      	ldr	r3, [pc, #292]	@ (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8084 	beq.w	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	0c9b      	lsrs	r3, r3, #18
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	4a44      	ldr	r2, [pc, #272]	@ (8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d015      	beq.n	8002e90 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e64:	4b3f      	ldr	r3, [pc, #252]	@ (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0c5b      	lsrs	r3, r3, #17
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8002e70:	5cd3      	ldrb	r3, [r2, r3]
 8002e72:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e7e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e004      	b.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4a38      	ldr	r2, [pc, #224]	@ (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e9a:	4b32      	ldr	r3, [pc, #200]	@ (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ea6:	d102      	bne.n	8002eae <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002eac:	e052      	b.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4a31      	ldr	r2, [pc, #196]	@ (8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	61bb      	str	r3, [r7, #24]
      break;
 8002ebc:	e04a      	b.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002ebe:	f7ff fe2b 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ec2:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002ec4:	e049      	b.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002ec6:	f7ff fe27 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002eca:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002ecc:	e045      	b.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002ece:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ede:	d108      	bne.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8002eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	e01f      	b.n	8002f32 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002efc:	d109      	bne.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002efe:	4b19      	ldr	r3, [pc, #100]	@ (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8002f0a:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	e00f      	b.n	8002f32 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f1c:	d11c      	bne.n	8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002f1e:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8002f2a:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002f2e:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002f30:	e012      	b.n	8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002f32:	e011      	b.n	8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f34:	f7ff fe62 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	0b9b      	lsrs	r3, r3, #14
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	3301      	adds	r3, #1
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	61bb      	str	r3, [r7, #24]
      break;
 8002f4e:	e004      	b.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8002f50:	bf00      	nop
 8002f52:	e002      	b.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002f54:	bf00      	nop
 8002f56:	e000      	b.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002f58:	bf00      	nop
    }
  }
  return (frequency);
 8002f5a:	69bb      	ldr	r3, [r7, #24]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	0800370c 	.word	0x0800370c
 8002f6c:	0800371c 	.word	0x0800371c
 8002f70:	007a1200 	.word	0x007a1200
 8002f74:	003d0900 	.word	0x003d0900
 8002f78:	aaaaaaab 	.word	0xaaaaaaab

08002f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e042      	b.n	8003014 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd fc80 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	@ 0x24
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f971 	bl	80032a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	@ 0x28
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b20      	cmp	r3, #32
 800303a:	d175      	bne.n	8003128 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_UART_Transmit+0x2c>
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e06e      	b.n	800312a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2221      	movs	r2, #33	@ 0x21
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800305a:	f7fd fcef 	bl	8000a3c <HAL_GetTick>
 800305e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	88fa      	ldrh	r2, [r7, #6]
 800306a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003074:	d108      	bne.n	8003088 <HAL_UART_Transmit+0x6c>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	e003      	b.n	8003090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003090:	e02e      	b.n	80030f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	2180      	movs	r1, #128	@ 0x80
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f848 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e03a      	b.n	800312a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	3302      	adds	r3, #2
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	e007      	b.n	80030e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	3301      	adds	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1cb      	bne.n	8003092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	2140      	movs	r1, #64	@ 0x40
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f814 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e006      	b.n	800312a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	e000      	b.n	800312a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003142:	e03b      	b.n	80031bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d037      	beq.n	80031bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314c:	f7fd fc76 	bl	8000a3c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	6a3a      	ldr	r2, [r7, #32]
 8003158:	429a      	cmp	r2, r3
 800315a:	d302      	bcc.n	8003162 <UART_WaitOnFlagUntilTimeout+0x30>
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e03a      	b.n	80031dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d023      	beq.n	80031bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b80      	cmp	r3, #128	@ 0x80
 8003178:	d020      	beq.n	80031bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b40      	cmp	r3, #64	@ 0x40
 800317e:	d01d      	beq.n	80031bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b08      	cmp	r3, #8
 800318c:	d116      	bne.n	80031bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f81d 	bl	80031e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2208      	movs	r2, #8
 80031ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e00f      	b.n	80031dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d0b4      	beq.n	8003144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b095      	sub	sp, #84	@ 0x54
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	330c      	adds	r3, #12
 80031f2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800320c:	643a      	str	r2, [r7, #64]	@ 0x40
 800320e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003212:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800321a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e5      	bne.n	80031ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3314      	adds	r3, #20
 8003226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3314      	adds	r3, #20
 800323e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003242:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e5      	bne.n	8003220 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	2b01      	cmp	r3, #1
 800325a:	d119      	bne.n	8003290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	60bb      	str	r3, [r7, #8]
   return(result);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f023 0310 	bic.w	r3, r3, #16
 8003272:	647b      	str	r3, [r7, #68]	@ 0x44
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	330c      	adds	r3, #12
 800327a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800327c:	61ba      	str	r2, [r7, #24]
 800327e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6979      	ldr	r1, [r7, #20]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	613b      	str	r3, [r7, #16]
   return(result);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e5      	bne.n	800325c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800329e:	bf00      	nop
 80032a0:	3754      	adds	r7, #84	@ 0x54
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80032e2:	f023 030c 	bic.w	r3, r3, #12
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2c      	ldr	r2, [pc, #176]	@ (80033bc <UART_SetConfig+0x114>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d103      	bne.n	8003318 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003310:	f7ff fc74 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	e002      	b.n	800331e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003318:	f7ff fc5c 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 800331c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009a      	lsls	r2, r3, #2
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	4a22      	ldr	r2, [pc, #136]	@ (80033c0 <UART_SetConfig+0x118>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	0119      	lsls	r1, r3, #4
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009a      	lsls	r2, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fbb2 f2f3 	udiv	r2, r2, r3
 8003354:	4b1a      	ldr	r3, [pc, #104]	@ (80033c0 <UART_SetConfig+0x118>)
 8003356:	fba3 0302 	umull	r0, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2064      	movs	r0, #100	@ 0x64
 800335e:	fb00 f303 	mul.w	r3, r0, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	3332      	adds	r3, #50	@ 0x32
 8003368:	4a15      	ldr	r2, [pc, #84]	@ (80033c0 <UART_SetConfig+0x118>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003374:	4419      	add	r1, r3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009a      	lsls	r2, r3, #2
 8003380:	441a      	add	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	fbb2 f2f3 	udiv	r2, r2, r3
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <UART_SetConfig+0x118>)
 800338e:	fba3 0302 	umull	r0, r3, r3, r2
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2064      	movs	r0, #100	@ 0x64
 8003396:	fb00 f303 	mul.w	r3, r0, r3
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	3332      	adds	r3, #50	@ 0x32
 80033a0:	4a07      	ldr	r2, [pc, #28]	@ (80033c0 <UART_SetConfig+0x118>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	440a      	add	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40013800 	.word	0x40013800
 80033c0:	51eb851f 	.word	0x51eb851f

080033c4 <get_adc_value>:

/**
 * @brief: 获取
 */
uint32_t get_adc_value(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80033c8:	4806      	ldr	r0, [pc, #24]	@ (80033e4 <get_adc_value+0x20>)
 80033ca:	f7fd fc4f 	bl	8000c6c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 5);
 80033ce:	2105      	movs	r1, #5
 80033d0:	4804      	ldr	r0, [pc, #16]	@ (80033e4 <get_adc_value+0x20>)
 80033d2:	f7fd fcf9 	bl	8000dc8 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 80033d6:	4803      	ldr	r0, [pc, #12]	@ (80033e4 <get_adc_value+0x20>)
 80033d8:	f7fd fdfc 	bl	8000fd4 <HAL_ADC_GetValue>
 80033dc:	4603      	mov	r3, r0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	2000002c 	.word	0x2000002c

080033e8 <CAN_Init>:

/**
 * @brief CAN初始化
 */
void CAN_Init()
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
    CAN_SetFilters();
 80033ec:	f000 f814 	bl	8003418 <CAN_SetFilters>
    HAL_CAN_Start(&hcan);
 80033f0:	4807      	ldr	r0, [pc, #28]	@ (8003410 <CAN_Init+0x28>)
 80033f2:	f7fe f952 	bl	800169a <HAL_CAN_Start>
    /*从Flash中读取privateStdId并写入寄存器*/
    privateStdId = Flash_ReadFilterDataToPage64();
 80033f6:	f000 f930 	bl	800365a <Flash_ReadFilterDataToPage64>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4a05      	ldr	r2, [pc, #20]	@ (8003414 <CAN_Init+0x2c>)
 80033fe:	6013      	str	r3, [r2, #0]
    CAN_SetBank1Filters(privateStdId);
 8003400:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <CAN_Init+0x2c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f831 	bl	800346c <CAN_SetBank1Filters>
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	2000005c 	.word	0x2000005c
 8003414:	20000130 	.word	0x20000130

08003418 <CAN_SetFilters>:
 *
 * @param
 * @return 初始化状态
 */
HAL_StatusTypeDef CAN_SetFilters()
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	@ 0x30
 800341c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef canFilter;

    // 2. 设置 bank0 的筛选器
    canFilter.FilterBank = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
    canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
    canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8003426:	2301      	movs	r3, #1
 8003428:	623b      	str	r3, [r7, #32]

    // STID = 0x0000, IDE = 0, RTR = 0 (广播)
    canFilter.FilterIdHigh = (0x00FF << 5);
 800342a:	f44f 53ff 	mov.w	r3, #8160	@ 0x1fe0
 800342e:	607b      	str	r3, [r7, #4]
    canFilter.FilterIdLow = 0x0000;
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
    canFilter.FilterMaskIdHigh = 0xffe0;
 8003434:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003438:	60fb      	str	r3, [r7, #12]
    //     canFilter.FilterMaskIdHigh = 0x0000;
    canFilter.FilterMaskIdLow = 0x0006;
 800343a:	2306      	movs	r3, #6
 800343c:	613b      	str	r3, [r7, #16]
    //     canFilter.FilterMaskIdLow = 0x0000;

    canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
    canFilter.FilterActivation = CAN_FILTER_ENABLE;
 8003442:	2301      	movs	r3, #1
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
    canFilter.SlaveStartFilterBank = 14;
 8003446:	230e      	movs	r3, #14
 8003448:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_StatusTypeDef result = HAL_CAN_ConfigFilter(&hcan, &canFilter);
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	4619      	mov	r1, r3
 800344e:	4806      	ldr	r0, [pc, #24]	@ (8003468 <CAN_SetFilters+0x50>)
 8003450:	f7fe f85a 	bl	8001508 <HAL_CAN_ConfigFilter>
 8003454:	4603      	mov	r3, r0
 8003456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    return result;
 800345a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800345e:	4618      	mov	r0, r3
 8003460:	3730      	adds	r7, #48	@ 0x30
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	2000005c 	.word	0x2000005c

0800346c <CAN_SetBank1Filters>:
 * @param stdId 设置 Bank1 筛选器的过滤 ID，用于私有消息接收
 *
 * @return 返回设置结果
 */
HAL_StatusTypeDef CAN_SetBank1Filters(uint32_t stdId)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08e      	sub	sp, #56	@ 0x38
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef canFilter;
    // 2. 设置 bank1 的筛选器
    canFilter.FilterBank = 1;
 8003474:	2301      	movs	r3, #1
 8003476:	623b      	str	r3, [r7, #32]
    canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
    canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800347c:	2301      	movs	r3, #1
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28

    // 设置 Filter Bank0 的 stdId
    canFilter.FilterIdHigh = (stdId << 5);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	015b      	lsls	r3, r3, #5
 8003484:	60fb      	str	r3, [r7, #12]
    canFilter.FilterIdLow = 0x0000;
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
    canFilter.FilterMaskIdHigh = 0xffe0;
 800348a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800348e:	617b      	str	r3, [r7, #20]
    canFilter.FilterMaskIdLow = 0x0006;
 8003490:	2306      	movs	r3, #6
 8003492:	61bb      	str	r3, [r7, #24]

    canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
    canFilter.FilterActivation = CAN_FILTER_ENABLE;
 8003498:	2301      	movs	r3, #1
 800349a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_StatusTypeDef result = HAL_CAN_ConfigFilter(&hcan, &canFilter);
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	4619      	mov	r1, r3
 80034a2:	4806      	ldr	r0, [pc, #24]	@ (80034bc <CAN_SetBank1Filters+0x50>)
 80034a4:	f7fe f830 	bl	8001508 <HAL_CAN_ConfigFilter>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    return result;
 80034ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3738      	adds	r7, #56	@ 0x38
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	2000005c 	.word	0x2000005c

080034c0 <FILTER_MsgProcess>:
/**
 * @brief 设置私有过滤器ID，对CAN接收到的数据进行解析，并设置私有过滤器ID
 * @param Rxdata CAN接受到的数据
 */
void FILTER_MsgProcess(uint8_t *Rxdata)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
    if (Rxdata[0] == 0x00)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10e      	bne.n	80034ee <FILTER_MsgProcess+0x2e>
    {
        uint32_t stdId = (Rxdata[1] << 8) + Rxdata[2];
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3301      	adds	r3, #1
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	3202      	adds	r2, #2
 80034dc:	7812      	ldrb	r2, [r2, #0]
 80034de:	4413      	add	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
        CAN_SetBank1Filters(stdId);
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff ffc2 	bl	800346c <CAN_SetBank1Filters>
        Flash_WriteFilterDataToPage64(stdId);
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f8aa 	bl	8003642 <Flash_WriteFilterDataToPage64>
    }
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <PRESSURE_Send>:
        }

    }
}

void PRESSURE_Send(uint8_t pressureId, uint16_t *adcValue){
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	@ 0x30
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	71fb      	strb	r3, [r7, #7]

    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[8];
    uint32_t TxMailbox;
    uint16_t MessageId = 2047 - privateStdId;
 8003504:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <PRESSURE_Send+0x80>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 800350e:	3307      	adds	r3, #7
 8003510:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    TxHeader.StdId = MessageId;      // 标准CAN ID
 8003512:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003514:	617b      	str	r3, [r7, #20]
    TxHeader.RTR = CAN_RTR_DATA; 		// 数据帧类型
 8003516:	2300      	movs	r3, #0
 8003518:	623b      	str	r3, [r7, #32]
    TxHeader.IDE = CAN_ID_STD;   		// 使用标准ID
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
    TxHeader.DLC = 8;            		// 数据长度码，表示8字节数据
 800351e:	2308      	movs	r3, #8
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.TransmitGlobalTime = DISABLE;
 8003522:	2300      	movs	r3, #0
 8003524:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    uint16_t adc = adcValue[pressureId];
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4413      	add	r3, r2
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    TxData[0] = pressureId;
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	733b      	strb	r3, [r7, #12]
    TxData[1] = (adc >> 8);
 8003538:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	b29b      	uxth	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	737b      	strb	r3, [r7, #13]
    TxData[2] = (adc & 0xFF);
 8003542:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003544:	b2db      	uxtb	r3, r3
 8003546:	73bb      	strb	r3, [r7, #14]
    TxData[3] = 0x00;
 8003548:	2300      	movs	r3, #0
 800354a:	73fb      	strb	r3, [r7, #15]
    TxData[4] = 0x00;
 800354c:	2300      	movs	r3, #0
 800354e:	743b      	strb	r3, [r7, #16]
    TxData[5] = 0x00;
 8003550:	2300      	movs	r3, #0
 8003552:	747b      	strb	r3, [r7, #17]
    TxData[6] = 0x00;
 8003554:	2300      	movs	r3, #0
 8003556:	74bb      	strb	r3, [r7, #18]
    TxData[7] = 0x00;
 8003558:	2300      	movs	r3, #0
 800355a:	74fb      	strb	r3, [r7, #19]
    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800355c:	f107 0308 	add.w	r3, r7, #8
 8003560:	f107 020c 	add.w	r2, r7, #12
 8003564:	f107 0114 	add.w	r1, r7, #20
 8003568:	4804      	ldr	r0, [pc, #16]	@ (800357c <PRESSURE_Send+0x84>)
 800356a:	f7fe f8da 	bl	8001722 <HAL_CAN_AddTxMessage>
    {
        // 发送失败处理
    }
}
 800356e:	bf00      	nop
 8003570:	3730      	adds	r7, #48	@ 0x30
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000130 	.word	0x20000130
 800357c:	2000005c 	.word	0x2000005c

08003580 <Flash_ErasePage64>:

/**
 * @brief 解锁Flash，擦除页
 */
void Flash_ErasePage64(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
    // 解锁Flash
    HAL_FLASH_Unlock();
 8003586:	f7fe fc37 	bl	8001df8 <HAL_FLASH_Unlock>

    // 配置擦除结构体
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]

    // 擦除第64页
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
    eraseInitStruct.PageAddress = 0x0800FC00; // 第64页的起始地址
 8003592:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <Flash_ErasePage64+0x40>)
 8003594:	613b      	str	r3, [r7, #16]
    eraseInitStruct.NbPages = 1;              // 只擦除1页（1KB）
 8003596:	2301      	movs	r3, #1
 8003598:	617b      	str	r3, [r7, #20]

    // 执行擦除
    if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK)
 800359a:	1d3a      	adds	r2, r7, #4
 800359c:	f107 0308 	add.w	r3, r7, #8
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fd10 	bl	8001fc8 <HAL_FLASHEx_Erase>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <Flash_ErasePage64+0x32>
    {
        // 处理擦除错误
        Error_Handler();
 80035ae:	f7fd f8e6 	bl	800077e <Error_Handler>
    }

    // 锁定Flash
    HAL_FLASH_Lock();
 80035b2:	f7fe fc47 	bl	8001e44 <HAL_FLASH_Lock>
}
 80035b6:	bf00      	nop
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	0800fc00 	.word	0x0800fc00

080035c4 <Flash_WriteDataToPage64>:
 * @brief 写入数据到末页
 * @param addressOffset 指定的偏移地址（32的整数倍0x20）
 * @param data 32位的数据
 */
void Flash_WriteDataToPage64(uint32_t addressOffset, uint32_t data)
{
 80035c4:	b5b0      	push	{r4, r5, r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
    // 清除页数据
    Flash_ErasePage64();
 80035ce:	f7ff ffd7 	bl	8003580 <Flash_ErasePage64>

    // 解锁Flash
    HAL_FLASH_Unlock();
 80035d2:	f7fe fc11 	bl	8001df8 <HAL_FLASH_Unlock>

    // 将数据写入指定偏移地址
    uint32_t address = 0x0800FC00 + addressOffset;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80035dc:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
 80035e0:	60fb      	str	r3, [r7, #12]
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2200      	movs	r2, #0
 80035e6:	461c      	mov	r4, r3
 80035e8:	4615      	mov	r5, r2
 80035ea:	4622      	mov	r2, r4
 80035ec:	462b      	mov	r3, r5
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	2002      	movs	r0, #2
 80035f2:	f7fe fb91 	bl	8001d18 <HAL_FLASH_Program>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <Flash_WriteDataToPage64+0x48>
    {
        // 写入错误处理
        Error_Handler();
 80035fc:	f7fd f8bf 	bl	800077e <Error_Handler>
        HAL_UART_Transmit(&huart1, "E01", 3, 5);
 8003600:	2305      	movs	r3, #5
 8003602:	2203      	movs	r2, #3
 8003604:	4904      	ldr	r1, [pc, #16]	@ (8003618 <Flash_WriteDataToPage64+0x54>)
 8003606:	4805      	ldr	r0, [pc, #20]	@ (800361c <Flash_WriteDataToPage64+0x58>)
 8003608:	f7ff fd08 	bl	800301c <HAL_UART_Transmit>
    }

    // 锁定Flash
    HAL_FLASH_Lock();
 800360c:	f7fe fc1a 	bl	8001e44 <HAL_FLASH_Lock>
}
 8003610:	bf00      	nop
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bdb0      	pop	{r4, r5, r7, pc}
 8003618:	080036dc 	.word	0x080036dc
 800361c:	200000c0 	.word	0x200000c0

08003620 <Flash_ReadDataFromPage64>:
 * @brief 读取末页数据
 * @param addressOffset 指定的偏移地址（32的整数倍0x20）
 * @return 读取到的32位数据
 */
uint32_t Flash_ReadDataFromPage64(uint32_t addressOffset)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
    // 从指定的偏移地址读取数据
    uint32_t address = 0x0800FC00 + addressOffset;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800362e:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
 8003632:	60fb      	str	r3, [r7, #12]
    return *(uint32_t *)address;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <Flash_WriteFilterDataToPage64>:
/**
 * @brief 写入储存器配置
 * @param filterId 储存器ID
 */
void Flash_WriteFilterDataToPage64(uint32_t filterId)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
    Flash_WriteDataToPage64(0x00000020, filterId);
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	2020      	movs	r0, #32
 800364e:	f7ff ffb9 	bl	80035c4 <Flash_WriteDataToPage64>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <Flash_ReadFilterDataToPage64>:
/**
 * @brief 读取储存器配置
 * @return filterId 读取到的储存器ID
 */
uint32_t Flash_ReadFilterDataToPage64()
{
 800365a:	b580      	push	{r7, lr}
 800365c:	af00      	add	r7, sp, #0
    return Flash_ReadDataFromPage64(0x00000020);
 800365e:	2020      	movs	r0, #32
 8003660:	f7ff ffde 	bl	8003620 <Flash_ReadDataFromPage64>
 8003664:	4603      	mov	r3, r0
 8003666:	4618      	mov	r0, r3
 8003668:	bd80      	pop	{r7, pc}

0800366a <memset>:
 800366a:	4603      	mov	r3, r0
 800366c:	4402      	add	r2, r0
 800366e:	4293      	cmp	r3, r2
 8003670:	d100      	bne.n	8003674 <memset+0xa>
 8003672:	4770      	bx	lr
 8003674:	f803 1b01 	strb.w	r1, [r3], #1
 8003678:	e7f9      	b.n	800366e <memset+0x4>
	...

0800367c <__libc_init_array>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	2600      	movs	r6, #0
 8003680:	4d0c      	ldr	r5, [pc, #48]	@ (80036b4 <__libc_init_array+0x38>)
 8003682:	4c0d      	ldr	r4, [pc, #52]	@ (80036b8 <__libc_init_array+0x3c>)
 8003684:	1b64      	subs	r4, r4, r5
 8003686:	10a4      	asrs	r4, r4, #2
 8003688:	42a6      	cmp	r6, r4
 800368a:	d109      	bne.n	80036a0 <__libc_init_array+0x24>
 800368c:	f000 f81a 	bl	80036c4 <_init>
 8003690:	2600      	movs	r6, #0
 8003692:	4d0a      	ldr	r5, [pc, #40]	@ (80036bc <__libc_init_array+0x40>)
 8003694:	4c0a      	ldr	r4, [pc, #40]	@ (80036c0 <__libc_init_array+0x44>)
 8003696:	1b64      	subs	r4, r4, r5
 8003698:	10a4      	asrs	r4, r4, #2
 800369a:	42a6      	cmp	r6, r4
 800369c:	d105      	bne.n	80036aa <__libc_init_array+0x2e>
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a4:	4798      	blx	r3
 80036a6:	3601      	adds	r6, #1
 80036a8:	e7ee      	b.n	8003688 <__libc_init_array+0xc>
 80036aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ae:	4798      	blx	r3
 80036b0:	3601      	adds	r6, #1
 80036b2:	e7f2      	b.n	800369a <__libc_init_array+0x1e>
 80036b4:	08003720 	.word	0x08003720
 80036b8:	08003720 	.word	0x08003720
 80036bc:	08003720 	.word	0x08003720
 80036c0:	08003724 	.word	0x08003724

080036c4 <_init>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr

080036d0 <_fini>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr
